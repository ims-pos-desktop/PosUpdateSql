CREATE OR ALTER PROCEDURE [dbo].[NSP_DEBTORSCREDITORS_AGEING] 
--DECLARE
	@DATE VARCHAR(25),@D1 NUMERIC,@D2 NUMERIC,@D3 NUMERIC,@D4 NUMERIC,
	@DIV VARCHAR(20),@FLG TINYINT,@SHOWDETAIL TINYINT,
	@EXNEGETIVE TINYINT=0,
	@CostCenter varchar(25)='%',
	@SHOWFALLOWUP TINYINT=0,
	@AGEINGOFPARTYOPENING TINYINT = 1,
	@TREE TINYINT = 0,
	@FYID VARCHAR(10) = '%'
AS

SET NOCOUNT ON

--SET @D1=15;SET @D2=30;SET @D3=45;SET @D4=60 --;SET @D5 = 75;SET @D6=90SET @PARTY='%';
--SET @DIV='%';SET @DATE='23-OCT-2017';SET @FLG=0; SET @SHOWDETAIL = 0


IF OBJECT_ID('TEMPDB..#AGINGAMOUNT') is not null drop table #AGINGAMOUNT
Create TABLE #AGINGAMOUNT (ACID VARCHAR(20), TRNDATE DATETIME,AMOUNT NUMERIC(18,2),CHECKDATE TINYINT)
DECLARE @ACID VARCHAR(20),@AVGAMOUNT AS NUMERIC(18,2),@REMAININGAMOUNT AS NUMERIC(18,2),@BAL AS NUMERIC(18,2),@AMOUNT NUMERIC(18,2),@TRNDATE DATETIME,@VNO VARCHAR(25),@CHKDATE INT

IF @FLG=0  -- DEBTORS
		BEGIN
			--CURSOR TO HOLD DEBTORS PARTY BALANCE
			DECLARE ACID_CURSOR CURSOR FOR 
			SELECT A_ACID,SUM(DRAMNT)-SUM(CRAMNT) AS BAL FROM RMD_TRNTRAN A INNER JOIN RMD_TRNMAIN B ON 
			A.VCHRNO=B.VCHRNO AND A.DIVISION=B.DIVISION
			INNER JOIN RMD_ACLIST C ON A.A_ACID = C.ACID
			WHERE  B.TRNDATE <=@DATE AND A.DIVISION LIKE @DIV and C.PTYPE LIKE 'C%' AND C.ACID LIKE 'PA%' and isnull(A.CostCenter,'') like @CostCenter AND B.PHISCALID = @FYID
			GROUP BY A_ACID  
			having (@EXNEGETIVE = 10 OR (@EXNEGETIVE =0 and  (sum(dramnt)- sum(cramnt)) <> 0) or (@EXNEGETIVE =1 and (sum(dramnt)- sum(cramnt)) > 0) or (@EXNEGETIVE = 2 and (sum(dramnt)- sum(cramnt)) < 0 ))

		END
ELSE			-- CREDITORS
		BEGIN
			--CURSOR TO HOLD CREDITORS PARTY BALANCE
			DECLARE ACID_CURSOR CURSOR FOR 
			SELECT A_ACID,SUM(CRAMNT)-SUM(DRAMNT) AS BAL FROM RMD_TRNTRAN A INNER JOIN RMD_TRNMAIN B ON A.VCHRNO=B.VCHRNO AND A.DIVISION=B.DIVISION
			INNER JOIN RMD_ACLIST C ON A.A_ACID = C.ACID
			WHERE B.TRNDATE <=@DATE AND A.DIVISION LIKE @DIV AND C.PTYPE LIKE 'V%' AND C.ACID LIKE 'PA%' and isnull(A.CostCenter,'') like @CostCenter AND B.PhiscalID = @FYID 
			GROUP BY A_ACID  
			having ((@EXNEGETIVE =0 and  (sum(Cramnt)- sum(Dramnt)) <> 0) or (@EXNEGETIVE =1 and (sum(Cramnt)- sum(Dramnt)) > 0) or (@EXNEGETIVE >1 and (sum(Cramnt)- sum(Dramnt)) < 0 ))
			
		END	

	OPEN ACID_CURSOR
		FETCH NEXT FROM ACID_CURSOR INTO @ACID,@BAL
			WHILE @@FETCH_STATUS =0
				BEGIN
					SET @REMAININGAMOUNT=@BAL
					SET @AVGAMOUNT=0					
					
					IF @REMAININGAMOUNT < 0		-- IF NEGATIVE PARTY BALANCE 
						BEGIN
							INSERT INTO #AGINGAMOUNT(ACID,TRNDATE,AMOUNT,CHECKDATE) VALUES(@ACID,'01-01-99',@REMAININGAMOUNT,0)
							GOTO NEXTCURSOR
						END

					IF @FLG=0				-- DEBTORS CASE
						BEGIN
							DECLARE PICURSOR  CURSOR FOR SELECT DRAMNT,
							CASE WHEN A.VOUCHERTYPE IN ('AO', 'OB') THEN CASE WHEN ISNULL(A.CHEQUEDATE,'') = '' THEN B.TRNDATE ELSE A.ChequeDate END ELSE B.TRNDATE END TRNDATE,
							B.VCHRNO FROM RMD_TRNTRAN A INNER JOIN RMD_TRNMAIN B 
							ON A.VCHRNO=B.VCHRNO AND A.DIVISION=B.DIVISION 
							WHERE A.DIVISION LIKE @DIV AND DRAMNT > 0 AND  B.TRNDATE <=@DATE AND A.A_ACID=@ACID AND B.PHISCALID = @FYID
							ORDER BY B.TRNDATE DESC
						END
					ELSE							-- CREDITORS CASE
						BEGIN
							DECLARE PICURSOR  CURSOR FOR SELECT CRAMNT,
							CASE WHEN A.VOUCHERTYPE IN ('AO', 'OB') THEN CASE WHEN ISNULL(A.CHEQUEDATE,'') = '' THEN B.TRNDATE ELSE A.ChequeDate END ELSE B.TRNDATE END TRNDATE,
							B.VCHRNO FROM RMD_TRNTRAN A INNER JOIN RMD_TRNMAIN B 
							ON A.VCHRNO=B.VCHRNO AND A.DIVISION=B.DIVISION 
							WHERE A.DIVISION LIKE @DIV AND CRAMNT > 0 AND  B.TRNDATE <=@DATE AND A.A_ACID=@ACID AND B.PHISCALID = @FYID
							ORDER BY B.TRNDATE DESC
						END 
					
					OPEN PICURSOR

					FETCH NEXT FROM PICURSOR INTO @AMOUNT,@TRNDATE,@VNO
						WHILE @@FETCH_STATUS =0
							BEGIN
								IF @REMAININGAMOUNT <= @AMOUNT 
									BEGIN
										BEGIN
											IF LEFT(@VNO,2) IN ('AO', 'OB')
												SET @CHKDATE = 2
											ELSE
												SET @CHKDATE = 1
										END
										INSERT INTO #AGINGAMOUNT(ACID,TRNDATE,AMOUNT,CHECKDATE) VALUES(@ACID,@TRNDATE,@REMAININGAMOUNT,@CHKDATE)
										BREAK
									END
								ELSE
									BEGIN
										BEGIN
											IF LEFT(@VNO,2) IN ('AO', 'OB')
												SET @CHKDATE = 2
											ELSE
												SET @CHKDATE = 1
										END
										SET @REMAININGAMOUNT = @REMAININGAMOUNT-@AMOUNT
										INSERT INTO #AGINGAMOUNT(ACID,TRNDATE,AMOUNT,CHECKDATE) VALUES(@ACID,@TRNDATE,@AMOUNT,@CHKDATE)
							END
							FETCH NEXT FROM PICURSOR INTO @AMOUNT,@TRNDATE,@VNO
						END
					CLOSE PICURSOR
					DEALLOCATE PICURSOR
		NEXTCURSOR:
		FETCH NEXT FROM ACID_CURSOR INTO @ACID,@BAL
	END
	CLOSE ACID_CURSOR
	DEALLOCATE ACID_CURSOR
	-- SELECT * FROM #AGINGAMOUNT
	-- QUERTY TO DISPLAY
	DECLARE @QSTRING AS NVARCHAR(2000)
	IF @AGEINGOFPARTYOPENING = 0
		BEGIN
			SET @QSTRING = N'(
				SELECT A.ACID,
				SUM(CASE WHEN DATEDIFF(d,trndate,''' + @date + ''') < ' + CAST(@D1 AS VARCHAR(25)) + N' AND CHECKDATE =1 then amount else 0 end) as D1, 
				sum(case when datediff(d,trndate,''' + @date + ''') >= ' + CAST(@D1 AS VARCHAR(25)) + N' and datediff(d,trndate,''' + @date + ''') < ' + CAST(@D2 AS VARCHAR(25)) + N' AND CHECKDATE =1 then amount else 0 end ) as D2, 
				sum(case when datediff(d,trndate,''' + @date + ''') >= ' + CAST(@D2 AS VARCHAR(25)) + N' and datediff(d,trndate,''' + @date + ''') < ' + CAST(@D3 AS VARCHAR(25)) + N' AND CHECKDATE =1 then amount else 0 end ) as D3, 
				sum(case when datediff(d,trndate,''' + @date + ''') >= ' + CAST(@D3 AS VARCHAR(25)) + N'  and datediff(d,trndate,''' + @date + ''') < ' +  CAST(@D4 AS VARCHAR(25)) + N' AND CHECKDATE =1 then amount else 0 end ) as D4,				
				sum(case when datediff(d,trndate,''' + @date + ''') >= ' + CAST(@D4 AS VARCHAR(25)) + N' AND CHECKDATE =1 then amount else 0 end ) as D5,
				sum(case when CHECKDATE =2 then amount else 0 end) as D6,sum(case when CHECKDATE =0 then amount else 0 end ) as D7 
				from #AGINGAMOUNT A GROUP BY A.ACID
				) AS A INNER JOIN RMD_ACLIST B ON A.ACID=B.ACID' 
		END
		
		--sum(case when datediff(d,trndate,''' + @date + ''') >= ' + CAST(@D4 AS VARCHAR(25)) + N' and datediff(d,trndate,''' + @date + ''') <' +  CAST(@D5 AS VARCHAR(25)) + N' AND CHECKDATE =1 then amount else 0 end ) as D5,  

	ELSE
		BEGIN
			SET @QSTRING = N'(
				SELECT A.ACID,
				SUM(CASE WHEN DATEDIFF(d,trndate,''' + @date + ''') < ' + CAST(@D1 AS VARCHAR(25)) + N' AND CHECKDATE <> 0 then amount else 0 end) as D1, 
				sum(case when datediff(d,trndate,''' + @date + ''') >= ' + CAST(@D1 AS VARCHAR(25)) + N' and datediff(d,trndate,''' + @date + ''') < ' + CAST(@D2 AS VARCHAR(25)) + N' AND CHECKDATE <>0 then amount else 0 end ) as D2, 
				sum(case when datediff(d,trndate,''' + @date + ''') >= ' + CAST(@D2 AS VARCHAR(25)) + N' and datediff(d,trndate,''' + @date + ''') < ' + CAST(@D3 AS VARCHAR(25)) + N' AND CHECKDATE <>0 then amount else 0 end ) as D3, 
				sum(case when datediff(d,trndate,''' + @date + ''') >= ' + CAST(@D3 AS VARCHAR(25)) + N'  and datediff(d,trndate,''' + @date + ''') < ' +  CAST(@D4 AS VARCHAR(25)) + N' AND CHECKDATE <>0 then amount else 0 end ) as D4,   
				sum(case when datediff(d,trndate,''' + @date + ''') >= ' + CAST(@D4 AS VARCHAR(25)) + N' AND CHECKDATE <>0 then amount else 0 end ) as D5, 
				0 D6, SUM (case when CHECKDATE =0 then amount else 0 end ) as D7 
				from #AGINGAMOUNT A GROUP BY A.ACID
				) AS A INNER JOIN RMD_ACLIST B ON A.ACID=B.ACID' 
		END

		IF @SHOWDETAIL = 0
			SET @QSTRING = N'SELECT ISNULL(B.ACCODE,'''') ACCODE, B.ACNAME,(D1+D2+D3+D4+D5+D6+D7) BALANCE,D1,D2,D3,D4,D5,D6,D7,A.ACID FROM ' +  @QSTRING 
		ELSE
			SET @QSTRING = N'SELECT ISNULL(B.ACCODE,'''') ACCODE, B.ACNAME,(D1+D2+D3+D4+D5+D6+D7) BALANCE,D1,D2,D3,D4,D5,D6,D7,B.ADDRESS, B.PHONE, C.CONTACTNAME,
			C.CDESIGNATION,C.CCONTACT_A,A.ACID FROM ' +  @QSTRING + ' LEFT JOIN PARTY_ADDITIONALINFO C ON A.ACID = C.ACID'

		IF @EXNEGETIVE =0
			SET @QSTRING =@QSTRING + N'  WHERE (D1+D2+D3+D4+D5+D6+D7)  <> 0 '
		ELSE if @EXNEGETIVE =1
			SET @QSTRING =@QSTRING + N'  WHERE (D1+D2+D3+D4+D5+D6+D7)  > 0  '
		ELSE  if @EXNEGETIVE = 2
			SET @QSTRING =@QSTRING + N'  WHERE (D1+D2+D3+D4+D5+D6+D7)  < 0  '

IF OBJECT_ID('TEMPDB..#RESULT') is not null drop table #RESULT
Create TABLE #RESULT (
ACCODE VARCHAR(25),ACNAME VARCHAR(100),BALANCE NUMERIC(18,6),
D1 NUMERIC(18,6),D2 NUMERIC(18,6),D3 NUMERIC(18,6),D4 NUMERIC(18,6),D5 NUMERIC(18,6),D6 NUMERIC(18,6),D7 NUMERIC(18,6),
ADDRESS VARCHAR(100),PHONE VARCHAR(50),CONTACTNAME VARCHAR(100),CDESIGNATION VARCHAR(50),CCONTACT_A VARCHAR(50), ACID VARCHAR(25)
)

IF @SHOWDETAIL = 0
	SET @QSTRING =N'INSERT INTO #RESULT (ACCODE,ACNAME,BALANCE,D1,D2,D3,D4,D5,D6,D7,ACID) SELECT * FROM (' + @QSTRING + N') A'
ELSE
	SET @QSTRING =N'INSERT INTO #RESULT (ACCODE,ACNAME,BALANCE,D1,D2,D3,D4,D5,D6,D7,ADDRESS,PHONE,CONTACTNAME,CDESIGNATION,CCONTACT_A,ACID) SELECT * FROM (' + @QSTRING + N') A'

exec(@QSTRING)	

IF @TREE = 0
	SELECT * FROM 
	(
	SELECT ACCODE,ACNAME,CONVERT(VARCHAR,CAST(BALANCE AS MONEY),1) BALANCE,
	CONVERT(VARCHAR,CAST(D1 AS MONEY),1) D1,CONVERT(VARCHAR,CAST(D2 AS MONEY),1) D2,CONVERT(VARCHAR,CAST(D3 AS MONEY),1) D3,
	CONVERT(VARCHAR,CAST(D4 AS MONEY),1) D4,CONVERT(VARCHAR,CAST(D5 AS MONEY),1) D5,CONVERT(VARCHAR,CAST(D6 AS MONEY),1) D6,CONVERT(VARCHAR,CAST(D7 AS MONEY),1) D7,
	ACID,'A' FLG,ADDRESS,PHONE,CONTACTNAME,CDESIGNATION,CCONTACT_A FROM #RESULT 
	UNION ALL
	SELECT NULL,'TOTAL >>',CONVERT(VARCHAR,CAST(SUM(BALANCE) AS MONEY),1) BALANCE,
	CONVERT(VARCHAR,CAST(SUM(D1) AS MONEY),1) D1,CONVERT(VARCHAR,CAST(SUM(D2) AS MONEY),1) D2,CONVERT(VARCHAR,CAST(SUM(D3) AS MONEY),1) D3,
	CONVERT(VARCHAR,CAST(SUM(D4) AS MONEY),1) D4,CONVERT(VARCHAR,CAST(SUM(D5) AS MONEY),1) D5,CONVERT(VARCHAR,CAST(SUM(D6) AS MONEY),1) D6,CONVERT(VARCHAR,CAST(SUM(D7) AS MONEY),1) D7,
	'ZZZZZZZZZZZ' ACID,'B' FLG, NULL, NULL, NULL, NULL, NULL FROM #RESULT
	) A ORDER BY FLG,ACNAME

ELSE
BEGIN
	IF OBJECT_ID('TEMPDB..#TREE') is not null drop table #TREE
								
	SELECT A.ID,A.ACID,A.PARENT,A.TYPE,A.LEVEL,A.ACCODE,A.ACNAME,B.BALANCE,B.D1,B.D2,B.D3,B.D4,B.D5,B.D6,B.D7 
	INTO #TREE from dbo.TreeExpandFunction_Account('PX','PARTY',0,0,0,1) AS A
	LEFT JOIN #RESULT B ON A.ACID=B.ACID
									
	IF OBJECT_ID('TEMPDB..#TOTAL') is not null drop table #TOTAL
	SELECT SUM(ISNULL(BALANCE,0)) BALANCE,SUM(ISNULL(D1,0)) D1,SUM(ISNULL(D2,0))D2, SUM(ISNULL(D3,0))D3, SUM(ISNULL(D4,0))D4, SUM(ISNULL(D5,0))D5, SUM(ISNULL(D6,0))D6, SUM(ISNULL(D7,0))D7 INTO #TOTAL FROM #TREE
	
	--TOTALING WITH IN TREE
	-----------------------		
	DECLARE @LVL INT
	select @LVL=MAX(LEVEL) from #TREE 
	WHILE @lvl > 0
	BEGIN
		UPDATE A SET A.BALANCE = B.BALANCE,A.D1=B.D1,A.D2= B.D2,A.D3= B.D3,A.D4= B.D4,A.D5= B.D5,A.D6= B.D6,A.D7= B.D7
		FROM #TREE A INNER JOIN
		(
			SELECT PARENT,SUM(ISNULL(BALANCE,0)) BALANCE,SUM(ISNULL(D1,0)) D1,SUM(ISNULL(D2,0))D2, SUM(ISNULL(D3,0))D3, SUM(ISNULL(D4,0))D4, SUM(ISNULL(D5,0))D5, SUM(ISNULL(D6,0))D6, SUM(ISNULL(D7,0))D7
			FROM #TREE WHERE LEVEL = @LVL GROUP BY PARENT
		) B ON A.ACID = B.PARENT

		SET @lvl = @lvl - 1;
	END
	
	SELECT * FROM (
		SELECT A.ACNAME,A.ACCODE,CONVERT(VARCHAR,CAST(A.BALANCE AS MONEY),1) BALANCE,CONVERT(VARCHAR,CAST(D1 AS MONEY),1) D1,CONVERT(VARCHAR,CAST(A.D2 AS MONEY),1) D2,
		CONVERT(VARCHAR,CAST(A.D3 AS MONEY),1) D3,CONVERT(VARCHAR,CAST(A.D4 AS MONEY),1) D4,CONVERT(VARCHAR,CAST(A.D5 AS MONEY),1) D5,CONVERT(VARCHAR,CAST(A.D6 AS MONEY),1) D6,
		CONVERT(VARCHAR,CAST(A.D7 AS MONEY),1) D7,A.ACID,A.TYPE,A.ID FROM #TREE A WHERE A.BALANCE <> 0
		UNION ALL
		SELECT 'TOTAL >>' ACNAME,NULL ACCODE,CONVERT(VARCHAR,CAST(BALANCE AS MONEY),1) BALANCE,CONVERT(VARCHAR,CAST(D1 AS MONEY),1) DRAMNT,CONVERT(VARCHAR,CAST(D2 AS MONEY),1) D2,
		CONVERT(VARCHAR,CAST(D3 AS MONEY),1) D3,CONVERT(VARCHAR,CAST(D4 AS MONEY),1) D4,CONVERT(VARCHAR,CAST(D5 AS MONEY),1) D5,CONVERT(VARCHAR,CAST(D6 AS MONEY),1) D6,
		CONVERT(VARCHAR,CAST(D7 AS MONEY),1) D7,'ZZXXXZZZ' ACID,'G' TYPE,99999 ID FROM #TOTAL A 
	) A WHERE ID>1 ORDER BY A.ID

END

IF OBJECT_ID('TEMPDB..#TREE') is not null drop table #TREE
IF OBJECT_ID('TEMPDB..#TOTAL') is not null drop table #TOTAL
IF OBJECT_ID('TEMPDB..#RESULT') is not null drop table #RESULT
IF OBJECT_ID('TEMPDB..#AGINGAMOUNT') is not null drop table #AGINGAMOUNT

set nocount off

