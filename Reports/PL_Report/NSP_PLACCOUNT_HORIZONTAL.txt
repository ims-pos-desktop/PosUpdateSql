CREATE OR ALTER PROCEDURE [dbo].[NSP_PLACCOUNT_HORIZONTAL]
--DECLARE 
	@DATE1 DATETIME,
	@DATE2 DATETIME,
	@DIV VARCHAR(3) = '%',
	@OSTOCK NUMERIC(22,10),
	@CSTOCK NUMERIC(22,10),
	@SUMMARY TINYINT = 1,
	@SHOWSUBLEDGER TINYINT = 0,
	@LEV INT = 2,
	@IsUserInput BIT = 0
AS

set nocount on

--SET @DATE1 = '07-12-22';SET @DATE2 = '07-12-22'; SET @DIV = '%'; SET @OSTOCK = 700; SET @CSTOCK = 780
DECLARE @GROSSPROFIT NUMERIC(24,12)
DECLARE @NETPROFIT NUMERIC(24,12)
DECLARE @GrossIncomeTotal NUMERIC(22,10)
DECLARE @GrossExpenseTotal NUMERIC (22,10)
DECLARE @NetIncomeTotal NUMERIC(22,10)
DECLARE @NetExpenseTotal NUMERIC (22,10)
DECLARE @LVL INT

DECLARE @LVL1 INT,@LVL2 INT,@LVL3 INT,@LVL4 INT
DECLARE @MLVL1 INT,@MLVL2 INT,@MLVL3 INT,@MLVL4 INT

SET @LEV = @LEV +1
IF OBJECT_ID('TEMPDB..#FINALRECORD') is not null drop table #FINALRECORD

SELECT * INTO #FINALRECORD FROM
(
SELECT A_ACID,SUM(ISNULL(DRAMNT,0))-SUM(ISNULL(CRAMNT,0)) BL,C.ACTYPE,C.PARENT SUBGROUP,C.MAINGROUP,'' IsUserInput FROM RMD_TRNTRAN A INNER JOIN RMD_TRNMAIN B ON A.VCHRNO = B.VCHRNO AND A.DIVISION = B.DIVISION AND ISNULL(A.PHISCALID,'') = ISNULL(B.PHISCALID,'') 
INNER JOIN RMD_ACLIST C ON A.A_ACID = C.ACID WHERE B.TRNDATE BETWEEN @DATE1 AND @DATE2 AND ISNULL(A.DIVISION,'') LIKE @DIV 
AND A.A_ACID NOT IN ('DE01001','DI01003') AND ISNULL(C.ACTYPE,'') IN ('II','IE','DI','DE') GROUP BY A_ACID,C.ACTYPE,C.PARENT,C.MAINGROUP
HAVING ISNULL(SUM(DRAMNT)-SUM(CRAMNT),0) <> 0
UNION ALL
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP,IIF(@IsUserInput = 1, ' (M)','') IsUserInput FROM (SELECT 'DE01001' ACID,@OSTOCK BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID 		  --OPENING STOCK (DR)
UNION ALL
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP,IIF(@IsUserInput = 1, ' (M)','') IsUserInput FROM (SELECT 'DI01003' ACID,@CSTOCK*-1 BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID       --CLOSING STOCKD (CR)    
) A



SELECT @GROSSPROFIT = ROUND(SUM(BL),2) FROM #FINALRECORD WHERE ACTYPE IN ('DE','DI')
SELECT @NETPROFIT = SUM(BL) FROM #FINALRECORD
SELECT @GrossIncomeTotal = ROUND(SUM(BL),2) FROM #FINALRECORD WHERE ACTYPE = 'DI'
SELECT @GrossExpenseTotal = ROUND(SUM(BL),2) FROM #FINALRECORD WHERE ACTYPE = 'DE'
SELECT @NetIncomeTotal = ROUND(SUM(BL),2) FROM #FINALRECORD WHERE ACTYPE IN ('II','DI')	
SELECT @NetExpenseTotal = ROUND(SUM(BL),2) FROM #FINALRECORD WHERE ACTYPE IN ('DE','IE')	

IF @GROSSPROFIT >= 0 
	SET @GrossIncomeTotal = ABS(@GrossIncomeTotal) + ABS(@GROSSPROFIT)
ELSE
	SET @GrossExpenseTotal = ABS(@GrossExpenseTotal) + ABS(@GROSSPROFIT)


IF @NETPROFIT >= 0 
	SET @NetIncomeTotal = ABS(@NetIncomeTotal) + ABS(@NETPROFIT)
ELSE
	SET @NetExpenseTotal = ABS(@NetExpenseTotal) + ABS(@NETPROFIT)


IF OBJECT_ID('TEMPDB..#TREE') is not null drop table #TREE
SELECT * INTO #TREE FROM (SELECT A.*,B.ACTYPE FROM  DBO.TreeExpandFunction_Account('PL','PLACCOUNT',0,0,0,0) A INNER JOIN RMD_ACLIST B ON A.ACID = B.ACID) A

--DIRECT INCOME
---------------
IF OBJECT_ID('TEMPDB..#TREE1') is not null drop table #TREE1
SELECT A.ACNAME + COALESCE(B.IsUserInput,'') ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE1 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'DI') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'DI') B ON A.ACID = B.A_ACID ORDER BY LEVEL

--TOTALING	
----------
select @LVL=ISNULL(MAX(LEVEL),0) from #TREE1 
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE1 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE1 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END

select @LVL1=ISNULL(MAX(LEVEL),0) from #TREE1 
select @MLVL1=ISNULL(MIN(LEVEL),0) from #TREE1 

IF OBJECT_ID('TEMPDB..#DIRECTINCOME') is not null drop table #DIRECTINCOME
SELECT ROW_NUMBER() OVER(ORDER BY ID) AS ROWNUM,A.ACNAME,A.BL,A.SUBTOTAL,A.MAINBL,A.ACID,A.ID,A.[TYPE],MCAT INTO #DIRECTINCOME FROM 
(
SELECT ACNAME,(CASE WHEN LEVEL = @LVL1 THEN BL ELSE NULL END)*-1 BL,(CASE WHEN LEVEL > @MLVL1 AND LEVEL <@LVL1 THEN BL ELSE NULL END)*-1 SUBTOTAL,	(CASE WHEN LEVEL = @MLVL1 THEN BL ELSE NULL END)*-1 MAINBL,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT FROM #TREE1 WHERE ISNULL(BL,0) <> 0
UNION ALL
SELECT '  GROSS LOSS ',NULL,NULL,ABS(@GROSSPROFIT),NULL,10000,100,'G',NULL,NULL WHERE @GROSSPROFIT > 0
) A WHERE ((@SHOWSUBLEDGER=0 AND ISNULL(A.MCAT,'') NOT IN ('SL','SG')) OR (@SHOWSUBLEDGER=1 AND ISNULL(A.MCAT,'') LIKE '%'))
AND (((@SUMMARY = 1 AND [LEVEL] <=@LEV) OR (@SUMMARY = 0 AND [LEVEL] <=10000)) OR [LEVEL] >= 100)

--DIRECT EXPENSES
------------------
IF OBJECT_ID('TEMPDB..#TREE2') is not null drop table #TREE2
SELECT  A.ACNAME + COALESCE(B.IsUserInput,'') ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE2 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'DE') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'DE') B ON A.ACID = B.A_ACID ORDER BY LEVEL
--TOTALING	
----------
select @LVL=ISNULL(ISNULL(MAX(LEVEL),0),0) from #TREE2	
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE2 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE2 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END

select @LVL2=ISNULL(MAX(LEVEL),0) from #TREE2 
select @MLVL2=ISNULL(MIN(LEVEL),0) from #TREE2 

IF OBJECT_ID('TEMPDB..#DIRECTEXPENSES') is not null drop table #DIRECTEXPENSES
SELECT ROW_NUMBER() OVER(ORDER BY ID) AS ROWNUM,A.ACNAME,A.BL,A.SUBTOTAL,A.MAINBL,A.ACID,A.ID,A.[TYPE],MCAT INTO #DIRECTEXPENSES FROM 
(
SELECT ACNAME,(CASE WHEN LEVEL = @LVL2 THEN BL ELSE NULL END)BL,(CASE WHEN LEVEL > @MLVL2 AND LEVEL <@LVL2 THEN BL ELSE NULL END) SUBTOTAL,(CASE WHEN LEVEL = @MLVL2 THEN BL ELSE NULL END) MAINBL,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT FROM #TREE2 WHERE ISNULL(BL,0) <> 0
UNION ALL
SELECT '  GROSS PROFIT ',NULL,NULL,ABS(@GROSSPROFIT),NULL,10000,100,'G',NULL,NULL WHERE @GROSSPROFIT <= 0
) A WHERE ((@SHOWSUBLEDGER=0 AND ISNULL(A.MCAT,'') NOT IN ('SL','SG')) OR (@SHOWSUBLEDGER=1 AND ISNULL(A.MCAT,'') LIKE '%'))
AND (((@SUMMARY = 1 AND [LEVEL] <=@LEV) OR (@SUMMARY = 0 AND [LEVEL] <=10000)) OR [LEVEL] >= 100)

		
--PREPARING OUTPUT FOR GROSS PROFIT/LOSS
-----------------------------------------

IF OBJECT_ID('TEMPDB..#PLACCOUNT') is not null drop table #PLACCOUNT 
SELECT ' ' + B.ACNAME EXP_ACNAME,B.BL EXP_AMOUNT,B.SUBTOTAL EXP_SUBTOTAL,B.MAINBL EXP_MAINBL,' ' + A.ACNAME INC_INCOME,A.BL INC_AMOUNT,A.SUBTOTAL INC_SUBTOTAL,A.MAINBL INC_MAINBL,B.ACID ACID_EXP,B.ID ID_EXP,B.[TYPE] TYPE_EXP,A.ACID ACID_INC,A.ID ID_INC,A.[TYPE] TYPE_INC 
INTO #PLACCOUNT 
FROM #DIRECTINCOME A FULL OUTER JOIN #DIRECTEXPENSES B ON A.ROWNUM = B.ROWNUM ORDER BY A.ROWNUM
	
INSERT INTO #PLACCOUNT
SELECT '   GROSS LOSS C/D',NULL,NULL,ABS(@GROSSPROFIT),NULL,NULL,NULL,NULL,NULL,100,'G',NULL,NULL,NULL WHERE @GROSSPROFIT > 0
	
INSERT INTO #PLACCOUNT
SELECT '     TOTAL :',NULL,NULL,ABS(@GrossExpenseTotal),'    TOTAL :',NULL,NULL,ABS(@GrossIncomeTotal),NULL,100,'G',NULL,100,'G'
	
INSERT INTO #PLACCOUNT
SELECT NULL,NULL,NULL,NULL,'   GROSS PROFIT C/D',NULL,NULL,ABS(@GROSSPROFIT),NULL,NULL,NULL,NULL,100,'G' WHERE @GROSSPROFIT <= 0

--SELECT * FROM #PLACCOUNT

--INDIRECT INCOME
------------------
IF OBJECT_ID('TEMPDB..#TREE3') is not null drop table #TREE3
SELECT  A.ACNAME + COALESCE(B.IsUserInput,'') ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE3 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'II') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'II') B ON A.ACID = B.A_ACID ORDER BY LEVEL
--TOTALING	
----------
select @LVL=ISNULL(MAX(LEVEL),0) from #TREE3
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE3 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE3 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END

select @MLVL3=ISNULL(MIN(LEVEL),0) from #TREE3 
select @LVL3=ISNULL(MAX(LEVEL),0) from #TREE3 
	
--INDIRECT INCOME
-----------------
IF OBJECT_ID('TEMPDB..#INDIRECTINCOME') is not null drop table #INDIRECTINCOME
SELECT ROW_NUMBER() OVER(ORDER BY ID) AS ROWNUM,A.ACNAME,A.BL,A.SUBTOTAL,A.MAINBL,A.ACID,A.ID,A.[TYPE],MCAT INTO #INDIRECTINCOME FROM 
(
SELECT ACNAME,(CASE WHEN LEVEL = @LVL3 THEN BL ELSE NULL END)*-1 BL,(CASE WHEN LEVEL > @MLVL3 AND LEVEL <@LVL3 THEN BL ELSE NULL END)*-1 SUBTOTAL,(CASE WHEN LEVEL = @MLVL3 THEN BL ELSE NULL END)*-1 MAINBL,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT FROM #TREE3 WHERE ISNULL(BL,0) <> 0
UNION ALL
SELECT '   NET LOSS ',NULL,NULL,ABS(@NETPROFIT),NULL,10000,100,'G',NULL,NULL WHERE @NETPROFIT >= 0
) A WHERE ((@SHOWSUBLEDGER=0 AND ISNULL(A.MCAT,'') NOT IN ('SL','SG')) OR (@SHOWSUBLEDGER=1 AND ISNULL(A.MCAT,'') LIKE '%'))
AND (((@SUMMARY = 1 AND [LEVEL] <=@LEV) OR (@SUMMARY = 0 AND [LEVEL] <=10000)) OR [LEVEL] >= 100)


	
--INDIRECT EXPENSES
--------------------
IF OBJECT_ID('TEMPDB..#TREE4') is not null drop table #TREE4
SELECT  A.ACNAME + COALESCE(B.IsUserInput,'') ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE4 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'IE') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'IE') B ON A.ACID = B.A_ACID ORDER BY LEVEL
--TOTALING	
----------
select @LVL=ISNULL(MAX(LEVEL),0) from #TREE4
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE4 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE4 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END

select @LVL4=ISNULL(MAX(LEVEL),0) from #TREE4
select @MLVL4=ISNULL(MIN(LEVEL),0) from #TREE4

--INDIRECT EXPENSES
--------------------
IF OBJECT_ID('TEMPDB..#INDIRECTEXPENSES') is not null drop table #INDIRECTEXPENSES
SELECT ROW_NUMBER() OVER(ORDER BY ID) AS ROWNUM,A.ACNAME,A.BL,A.SUBTOTAL,A.MAINBL,A.ACID,A.ID,A.[TYPE],MCAT INTO #INDIRECTEXPENSES FROM 
(
SELECT ACNAME,CASE WHEN LEVEL = @LVL4 THEN BL ELSE NULL END BL,CASE WHEN LEVEL > @MLVL4 AND LEVEL <@LVL4 THEN BL ELSE NULL END SUBTOTAL,CASE WHEN LEVEL = @MLVL4 THEN BL ELSE NULL END MAINBL,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT FROM #TREE4 WHERE ISNULL(BL,0) <> 0
union all
SELECT '   NET PROFIT ',NULL,NULL,ABS(@NETPROFIT),NULL,10000,100,'G',NULL,NULL WHERE @NETPROFIT <= 0
) A WHERE ((@SHOWSUBLEDGER=0 AND ISNULL(A.MCAT,'') NOT IN ('SL','SG')) OR (@SHOWSUBLEDGER=1 AND ISNULL(A.MCAT,'') LIKE '%'))
AND (((@SUMMARY = 1 AND [LEVEL] <=@LEV) OR (@SUMMARY = 0 AND [LEVEL] <=10000)) OR [LEVEL] >= 100)

	
--SHOWING OUTPUT
----------------	

SELECT EXP_ACNAME,CONVERT(VARCHAR,CAST(EXP_AMOUNT AS MONEY),1) EXP_AMOUNT,CONVERT(VARCHAR,CAST(EXP_SUBTOTAL AS MONEY),1) EXP_SUBTOTAL,CONVERT(VARCHAR,CAST(EXP_MAINBL AS MONEY),1) EXP_MAINBL,
INC_INCOME,CONVERT(VARCHAR,CAST(INC_AMOUNT AS MONEY),1) INC_AMOUNT,CONVERT(VARCHAR,CAST(INC_SUBTOTAL AS MONEY),1) INC_SUBTOTAL,CONVERT(VARCHAR,CAST(INC_MAINBL AS MONEY),1) INC_MAINBL,ACID_EXP,ID_EXP,TYPE_EXP,ACID_INC,ID_INC,TYPE_INC FROM #PLACCOUNT
UNION ALL
SELECT B.ACNAME EXP_ACNAME,CONVERT(VARCHAR,CAST(B.BL AS MONEY),1)EXP_AMOUNT, CONVERT(VARCHAR,CAST(B.SUBTOTAL AS MONEY),1) EXP_SUBTOTAL,CONVERT(VARCHAR,CAST(B.MAINBL AS MONEY),1) EXP_MAINBL,
' ' + A.ACNAME INC_INCOME,CONVERT(VARCHAR,CAST(A.BL AS MONEY),1) INC_AMOUNT,CONVERT(VARCHAR,CAST(A.SUBTOTAL AS MONEY),1) INC_SUBTOTAL,CONVERT(VARCHAR,CAST(A.MAINBL AS MONEY),1) MAINBL_SUBTOTAL,B.ACID ACID_EXP,B.ID ID_EXP,B.[TYPE] TYPE_EXP,A.ACID ACID_INC,A.ID ID_INC,A.[TYPE] TYPE_INC
FROM #INDIRECTINCOME A FULL OUTER JOIN #INDIRECTEXPENSES B ON A.ROWNUM = B.ROWNUM
UNION ALL
SELECT '         TOTAL:',NULL,NULL,CONVERT(VARCHAR,CAST(ABS(@NetExpenseTotal) AS MONEY),1),'          TOTAL :',NULL,NULL,CONVERT(VARCHAR,CAST(ABS(@NetIncomeTotal) AS MONEY),1),NULL,100,'G',NULL,100,'G'

IF OBJECT_ID('TEMPDB..#FINALRECORD') is not null drop table #FINALRECORD
IF OBJECT_ID('TEMPDB..#TREE') is not null drop table #TREE
IF OBJECT_ID('TEMPDB..#DIRECTINCOME') is not null drop table #DIRECTINCOME
IF OBJECT_ID('TEMPDB..#DIRECTEXPENSES') is not null drop table #DIRECTEXPENSES
IF OBJECT_ID('TEMPDB..#INDIRECTINCOME') is not null drop table #INDIRECTINCOME
IF OBJECT_ID('TEMPDB..#INDIRECTEXPENSES') is not null drop table #INDIRECTEXPENSES
IF OBJECT_ID('TEMPDB..#PLACCOUNT') is not null drop table #PLACCOUNT

set nocount off

