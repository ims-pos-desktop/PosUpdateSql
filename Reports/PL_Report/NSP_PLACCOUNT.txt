
CREATE OR ALTER PROCEDURE [dbo].[NSP_PLACCOUNT]
--DECLARE 
	@DATE1 DATETIME,
	@DATE2 DATETIME,
	@DIV VARCHAR(3) = '%',
	@OSTOCK NUMERIC(22,10),
	@CSTOCK NUMERIC(22,10),
	@SUMMARY TINYINT = 1,
	@SHOWSUBLEDGER TINYINT = 0,
	@LEV INTEGER = 1000
AS

--SET @DATE1 = '07-15-15'; SET @DATE2 = '07-16-16'; SET @DIV = '%';SET @OSTOCK = 0;SET @CSTOCK = 0; SET @SUMMARY = 1;SET @LEV = 3
set nocount on
SET @LEV = @LEV+1                                                                                                                                                                                                                                                                                                                         
DECLARE @GROSSPROFIT NUMERIC(24,12)
DECLARE @NETPROFIT NUMERIC(24,12)
DECLARE @LVL INT

IF OBJECT_ID('TEMPDB..#FINALRECORD') is not null drop table #FINALRECORD
SELECT * INTO #FINALRECORD FROM
(
SELECT A_ACID,SUM(ISNULL(DRAMNT,0))-SUM(ISNULL(CRAMNT,0)) BL,C.ACTYPE,C.PARENT SUBGROUP,C.MAINGROUP FROM RMD_TRNTRAN A INNER JOIN RMD_TRNMAIN B ON A.VCHRNO = B.VCHRNO AND A.DIVISION = B.DIVISION AND ISNULL(A.PHISCALID,'') = ISNULL(B.PHISCALID,'') 
INNER JOIN RMD_ACLIST C ON A.A_ACID = C.ACID WHERE B.TRNDATE BETWEEN @DATE1 AND @DATE2 AND ISNULL(A.DIVISION,'') LIKE @DIV 
AND A.A_ACID NOT IN ('DE01001','DI01003') AND ISNULL(C.ACTYPE,'') IN ('II','IE','DI','DE') GROUP BY A_ACID,C.ACTYPE,C.PARENT,C.MAINGROUP
HAVING ISNULL(SUM(DRAMNT)-SUM(CRAMNT),0) <> 0
UNION ALL
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP FROM (SELECT 'DE01001' ACID,@OSTOCK BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID 		  --OPENING STOCK (DR)
UNION ALL
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP FROM (SELECT 'DI01003' ACID,@CSTOCK*-1 BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID       --CLOSING STOCKD (CR)    
) A

SELECT @GROSSPROFIT = ROUND(SUM(BL),2) FROM #FINALRECORD WHERE ACTYPE IN ('DE','DI')
SELECT @NETPROFIT = SUM(BL) FROM #FINALRECORD

IF OBJECT_ID('TEMPDB..#TREE') is not null drop table #TREE
SELECT * INTO #TREE FROM (SELECT A.*,B.ACTYPE FROM DBO.TreeExpandFunction_Account('PL','ACCOUNT',0,0,0,0) A INNER JOIN RMD_ACLIST B ON A.ACID = B.ACID) A

--DIRECT INCOME
---------------
IF OBJECT_ID('TEMPDB..#TREE1') is not null drop table #TREE1
SELECT A.ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE1 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'DI') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'DI') B ON A.ACID = B.A_ACID ORDER BY LEVEL
--SELECT * FROM #TREE1
--TOTALING	
----------
select @LVL=ISNULL(MAX(LEVEL),0) from #TREE1 
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE1 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE1 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END

--DIRECT EXPENSES
------------------
IF OBJECT_ID('TEMPDB..#TREE2') is not null drop table #TREE2
SELECT A.ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE2 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'DE') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'DE') B ON A.ACID = B.A_ACID ORDER BY LEVEL
--SELECT * FROM #TREE2
--TOTALING	
----------
select @LVL=ISNULL(ISNULL(MAX(LEVEL),0),0) from #TREE2	
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE2 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE2 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END

--INDIRECT INCOME
------------------
IF OBJECT_ID('TEMPDB..#TREE3') is not null drop table #TREE3
SELECT A.ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE3 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'II') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'II') B ON A.ACID = B.A_ACID ORDER BY LEVEL
--SELECT * FROM #TREE3

--TOTALING	
----------
select @LVL=ISNULL(MAX(LEVEL),0) from #TREE3
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE3 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE3 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END


--INDIRECT EXPENSES
--------------------
IF OBJECT_ID('TEMPDB..#TREE4') is not null drop table #TREE4
SELECT A.ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE4 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'IE') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'IE') B ON A.ACID = B.A_ACID ORDER BY LEVEL
--SELECT * FROM #TREE4

--TOTALING	
----------
select @LVL=ISNULL(MAX(LEVEL),0) from #TREE4
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE4 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE4 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END

--DECLARE @GROSSPROFIT NUMERIC(24,12)
--DECLARE @NETPROFIT NUMERIC(24,12)

--SELECT @GROSSPROFIT = ROUND(SUM(BL),2) FROM #FINALRECORD WHERE ACTYPE IN ('DE','DI')
--SELECT @NETPROFIT = SUM(BL) FROM #FINALRECORD

--RESULT
--------
--DIRECT INCOME
DECLARE @LVL1 INT,@LVL2 INT,@LVL3 INT,@LVL4 INT
DECLARE @MLVL1 INT,@MLVL2 INT,@MLVL3 INT,@MLVL4 INT

select @LVL1=ISNULL(MAX(LEVEL),0) from #TREE1 
select @LVL2=ISNULL(MAX(LEVEL),0) from #TREE2 
select @LVL3=ISNULL(MAX(LEVEL),0) from #TREE3 
select @LVL4=ISNULL(MAX(LEVEL),0) from #TREE4
select @MLVL1=ISNULL(MIN(LEVEL),0) from #TREE1 
select @MLVL2=ISNULL(MIN(LEVEL),0) from #TREE2 
select @MLVL3=ISNULL(MIN(LEVEL),0) from #TREE3 
select @MLVL4=ISNULL(MIN(LEVEL),0) from #TREE4

SELECT * FROM 
( 
	--DIRECT INCOME
	---------------
	SELECT ACNAME,CONVERT(VARCHAR,CAST(BL1 AS MONEY),1)BL1,CONVERT(VARCHAR,CAST(BL2 AS MONEY),1)BL2,CONVERT(VARCHAR,CAST(BL3 AS MONEY),1)BL3,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT, 0 FLAG FROM
	(
		SELECT ACNAME,(CASE WHEN LEVEL = @LVL1 THEN BL ELSE NULL END)*-1 BL1,(CASE WHEN LEVEL > @MLVL1 AND LEVEL <@LVL1 THEN BL ELSE NULL END)*-1 BL2,(CASE WHEN LEVEL = @MLVL1 THEN BL ELSE NULL END)*-1 BL3,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT FROM #TREE1 WHERE ISNULL(BL,0) <> 0
		UNION ALL
		SELECT 'TOTAL DIRECT INCOME (A) :',NULL,NULL,SUM(BL*-1),NULL,99999 ID,100 LEVEL,'G',NULL,NULL FROM #FINALRECORD WHERE ACTYPE = 'DI'
	) A
	UNION ALL
	SELECT ACNAME,CONVERT(VARCHAR,CAST(BL1 AS MONEY),1)BL1,CONVERT(VARCHAR,CAST(BL2 AS MONEY),1)BL2,CONVERT(VARCHAR,CAST(BL3 AS MONEY),1)BL3,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT, 1 FLAG FROM
	(
		SELECT ACNAME,CASE WHEN LEVEL = @LVL2 THEN BL ELSE NULL END BL1,CASE WHEN LEVEL > @MLVL2 AND LEVEL <@LVL2 THEN BL ELSE NULL END BL2,CASE WHEN LEVEL = @MLVL2 THEN BL ELSE NULL END BL3,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT FROM #TREE2 WHERE ISNULL(BL,0) <> 0
		UNION ALL
		SELECT 'TOTAL DIRECT EXPENSES (B) :',NULL,NULL,SUM(BL),NULL,99999 ID,100 LEVEL,'G',NULL,NULL FROM #FINALRECORD WHERE ACTYPE = 'DE'
	) A
	UNION ALL
	--GROSS PROFIT / GROSS LOSS CALCULATION
	---------------------------------------
	SELECT CASE WHEN  @GROSSPROFIT > =0 THEN 'GROSS LOSS ' ELSE 'GROSS PROFIT ' END + ' ( A - B ) :',NULL,NULL,CASE WHEN @GROSSPROFIT<0 THEN '( - ) ' ELSE '' END + CONVERT(varchar, CAST(ABS(@GROSSPROFIT)AS MONEY),1),NULL,0,200,'G',NULL,NULL, 2 FLAG 
	UNION ALL
	SELECT CASE WHEN  @GROSSPROFIT > =0 THEN 'GROSS LOSS ' ELSE 'GROSS PROFIT ' END + ' C/D (C) : ',NULL,NULL,CONVERT(varchar, CAST(ABS(@GROSSPROFIT)AS MONEY),1),NULL,0,100,'G',NULL,NULL, 3 FLAG 
	UNION ALL
	--INDIRECT INCOME
	------------------
	SELECT ACNAME,CONVERT(VARCHAR,CAST(BL1 AS MONEY),1)BL1,CONVERT(VARCHAR,CAST(BL2 AS MONEY),1)BL2,CONVERT(VARCHAR,CAST(BL3 AS MONEY),1)BL3,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT, 4 FLAG FROM
	(
		SELECT ACNAME,(CASE WHEN LEVEL = @LVL3 THEN BL ELSE NULL END)*-1 BL1,(CASE WHEN LEVEL > @MLVL3 AND LEVEL <@LVL3 THEN BL ELSE NULL END)*-1 BL2,(CASE WHEN LEVEL = @MLVL3 THEN BL ELSE NULL END)*-1 BL3,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT FROM #TREE3 WHERE ISNULL(BL,0) <> 0
		UNION ALL
		SELECT 'TOTAL INDIRECT INCOME (D) :',NULL,NULL,(SUM(BL))*-1,NULL,99999 ID,100 LEVEL,'G',NULL,NULL FROM #FINALRECORD WHERE ACTYPE = 'II'
	) A
	UNION ALL
	--INDIRECT EXPENSES
	-------------------
	SELECT ACNAME,CONVERT(VARCHAR,CAST(BL1 AS MONEY),1)BL1,CONVERT(VARCHAR,CAST(BL2 AS MONEY),1)BL2,CONVERT(VARCHAR,CAST(BL3 AS MONEY),1)BL3,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT, 5 FLAG FROM
	(
		SELECT ACNAME,CASE WHEN LEVEL = @LVL4 THEN BL ELSE NULL END BL1,CASE WHEN LEVEL > @MLVL4 AND LEVEL <@LVL4 THEN BL ELSE NULL END BL2,CASE WHEN LEVEL = @MLVL4 THEN BL ELSE NULL END BL3,ACID,ID,[LEVEL],[TYPE],ACTYPE,MCAT FROM #TREE4 WHERE ISNULL(BL,0) <> 0
		UNION ALL
		SELECT 'TOTAL INDIRECT EXPENSES (E) :',NULL,NULL,SUM(BL),NULL,99999 ID,100 LEVEL,'G',NULL,NULL FROM #FINALRECORD WHERE ACTYPE = 'IE'
	) A
	UNION ALL	
	--NET PROFIT/LOSS
	-------------------
	SELECT CASE WHEN  @NETPROFIT > =0 THEN 'NET LOSS ' ELSE 'NET PROFIT ' END + ' (C + D - E)',NULL,NULL,CASE WHEN @NETPROFIT>0 THEN '( - ) ' ELSE '' END + CONVERT(varchar, CAST(@NETPROFIT*-1 AS MONEY),1),NULL,0,200,'G',NULL,NULL, 6 FLAG 
) A WHERE ((@SHOWSUBLEDGER=0 AND ISNULL(A.MCAT,'') NOT IN ('SL','SG')) OR (@SHOWSUBLEDGER=1 AND ISNULL(A.MCAT,'') LIKE '%'))
AND (((@SUMMARY = 1 AND [LEVEL] <=@LEV) OR (@SUMMARY = 0 AND [LEVEL] <=1000)) OR [LEVEL] >= 100)
ORDER BY FLAG, ID
 
IF OBJECT_ID('TEMPDB..#FINALRECORD') is not null drop table #FINALRECORD
IF OBJECT_ID('TEMPDB..#TREE') is not null drop table #TREE
IF OBJECT_ID('TEMPDB..#TREE1') is not null drop table #TREE1
IF OBJECT_ID('TEMPDB..#TREE2') is not null drop table #TREE2
IF OBJECT_ID('TEMPDB..#TREE3') is not null drop table #TREE3
IF OBJECT_ID('TEMPDB..#TREE4') is not null drop table #TREE4

set nocount off


