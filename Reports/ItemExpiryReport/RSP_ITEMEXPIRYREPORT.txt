CREATE OR ALTER   PROCEDURE [dbo].[RSP_ITEMEXPIRYREPORT] 
--DECLARE
	@DATE1 DATETIME,
	@DATE2 DATETIME,
	@WAREHOUSE VARCHAR(100) = '%',
	@OPT_REPORTTYPE TINYINT = 0,						--NearExpiry:0,Expired:1,All:2
	@DIVISION VARCHAR(3) = '%',
	@MGROUP VARCHAR(25) = '%',
	@MCAT VARCHAR(25) = '%',
	@SUPPLIER_ACID VARCHAR(25) = '%',
	@FYID VARCHAR(10) = ''
AS
SET NOCOUNT ON
SET @DATE1 = '07-16-20'; SET @DATE2 = '07-15-21';SET @WAREHOUSE  = '%'
--DECLARE @DATE DATETIME = '03-27-18',@PATH VARCHAR(200) ='%',@PHISCALID VARCHAR(20)='%',@ITEM VARCHAR(25)= 'M28744P',@DETAIL TINYINT = 0

DECLARE @IGNOREMINUSTK TINYINT
SELECT @IGNOREMINUSTK = IGNOREMINUSSTKINSVALUATION FROM SETTING

IF @OPT_REPORTTYPE = 0	-- GOING TO EXPIRED REPORT
	SET @DATE1 = CONVERT(DATE, GETDATE())
ELSE IF @OPT_REPORTTYPE = 1	-- ALREADY EXPIRED REPORT
	SET @DATE2 = CONVERT(DATE, GETDATE())

--TEMPORARY TABLE FOR STOCK VALUATION DETAIL RECORD
----------------------------------------------------
IF OBJECT_ID('TEMPDB..#RESULT') IS NOT NULL DROP TABLE #RESULT
CREATE TABLE #RESULT (VCHRNO VARCHAR(25),TRNDATE DATETIME,MCODE VARCHAR(25),PQTY NUMERIC(18,6),QTY NUMERIC(18,6),RATE NUMERIC(18,6),AMOUNT NUMERIC(18,6), EXPDATE DATETIME)

--GETTING STOCK QTY
--------------------
IF OBJECT_ID('TEMPDB..#STOCK') IS NOT NULL DROP TABLE #STOCK

SELECT A.* INTO #STOCK  FROM
(
	SELECT A.MCODE,SUM(REALQTY_IN)-SUM(REALQTY) AS STOCKQTY  FROM RMD_TRNPROD A 
	INNER JOIN RMD_TRNMAIN B ON A.VCHRNO= B.VCHRNO AND A.DIVISION=B.DIVISION AND ISNULL(A.PHISCALID,'')=ISNULL(B.PHISCALID,'') 
	WHERE A.EXPDATE BETWEEN @DATE1 AND @DATE2 AND A.PhiscalID = @FYID AND A.EXPDATE IS NOT NULL
	AND A.DIVISION LIKE @DIVISION AND A.WAREHOUSE LIKE @WAREHOUSE
	GROUP BY A.MCODE  HAVING SUM(REALQTY_IN)-SUM(REALQTY) <> 0
) A 
INNER JOIN MENUITEM C ON A.MCODE=C.MCODE
WHERE C.REQEXPDATE = 1 AND C.MCAT LIKE @MCAT AND C.MGROUP LIKE @MGROUP AND C.SUPCODE LIKE @SUPPLIER_ACID

--Select * from #stock order by mcode



--GETTTING RECORD FOR VALUATION
-------------------------------
IF OBJECT_ID('TEMPDB..#DATA') IS NOT NULL DROP TABLE #DATA

SELECT A.VCHRNO,A.TRNDATE,C.MCODE, A.EXPDATE, ISNULL(QTY,0) QTY,ISNULL(RATE,0) RATE,ISNULL(C.STOCKQTY,0) STOCKQTY INTO #DATA FROM #STOCK C 
LEFT JOIN 
(
	SELECT A.VCHRNO,B.TRNDATE,A.MCODE,A.EXPDATE, SUM(REALQTY_IN) QTY,SUM((CASE WHEN ISNULL(CRATE,0) = 0 THEN ISNULL(RATE,0) ELSE ISNULL(CRATE,0) END) * REALQTY_IN)/sum(realqty_in) AS RATE 
	FROM  RMD_TRNPROD A INNER JOIN RMD_TRNMAIN B ON A.VCHRNO=B.VCHRNO AND A.DIVISION=B.DIVISION AND ISNULL(A.PHISCALID,'')=ISNULL(B.PHISCALID,'')
	WHERE LEFT(A.VCHRNO,2) IN ('PI','OP','TR')  AND A.EXPDATE BETWEEN @DATE1 AND @DATE2 AND ISNULL(REALQTY_IN,0) <> 0 AND A.EXPDATE IS NOT NULL
	AND A.DIVISION LIKE @DIVISION AND A.WAREHOUSE LIKE @WAREHOUSE
	GROUP BY A.VCHRNO,B.TRNDATE,A.MCODE, A.EXPDATE
) AS A ON C.MCODE=A.MCODE

--select * from #data --WHERE MCODE = 'M48661P' order by mcode

--PROCESSING RECORD FOR STOCK VALUATION
-----------------------------------------	
DECLARE @VCHRNO VARCHAR(25),@TRNDATE DATETIME,@MCODE VARCHAR(25),@QTY NUMERIC(18,6),@RATE NUMERIC(18,6),@STOCKQTY NUMERIC(18,6), @EXPDATE DATETIME
DECLARE @CURRENT_MCODE VARCHAR(25)='',@PQTY NUMERIC(18,6)=0
DECLARE @LEFTSTOCK NUMERIC(18,6) =0
DECLARE @RT AS NUMERIC(18,6) = 0,@Q AS NUMERIC(18,6),@ISDONE TINYINT =0,@MC VARCHAR(25)

	--PURCHASE/OPENING MISSING RECORD
	----------------------------------
	INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY, EXPDATE) 
	SELECT NULL VNO,NULL TDATE,A.MCODE,A.STOCKQTY,CASE WHEN ISNULL(B.CRATE,0) = 0 THEN ISNULL(B.PRATE_A,0) ELSE ISNULL(B.CRATE,0) END RATE,
	(CASE WHEN ISNULL(B.CRATE,0) = 0 THEN ISNULL(B.PRATE_A,0) ELSE ISNULL(B.CRATE,0) END) * A.STOCKQTY,0 PQTY, EXPDATE FROM #DATA A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE
	WHERE ISNULL(VCHRNO,'') = '' AND  ISNULL(A.STOCKQTY,0) > 0

	--NEGETIVE STOCK RECORD
	-----------------------
	IF @IGNOREMINUSTK = 0
		INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY, EXPDATE) 
		SELECT DISTINCT NULL VNO,NULL TDATE,A.MCODE,A.STOCKQTY,
		CASE WHEN @IGNOREMINUSTK = 0 THEN CASE WHEN ISNULL(B.CRATE,0) = 0 THEN ISNULL(B.PRATE_A,0) ELSE ISNULL(B.CRATE,0) END ELSE 0 END RATE,
		(CASE WHEN @IGNOREMINUSTK = 0 THEN CASE WHEN ISNULL(B.CRATE,0) = 0 THEN ISNULL(B.PRATE_A,0) ELSE ISNULL(B.CRATE,0) END ELSE 0 END) * A.STOCKQTY,0 PQTY, EXPDATE
		FROM #DATA A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE WHERE  ISNULL(A.STOCKQTY,0) < 0
	ELSE
		INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY, EXPDATE) 
		SELECT DISTINCT NULL VNO,NULL TDATE,A.MCODE,A.STOCKQTY,0,0,0 PQTY, EXPDATE
		FROM #DATA A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE WHERE ISNULL(A.STOCKQTY,0) < 0

	--POSTIVE STOCK WITH PURCHASE/OPENING RECORD
	---------------------------------------------
	DECLARE DOVALUATION_CURSOR CURSOR FOR 
		SELECT VCHRNO,TRNDATE,MCODE,QTY,RATE,STOCKQTY, EXPDATE FROM #DATA WHERE ISNULL(VCHRNO,'') <> '' AND ISNULL(STOCKQTY,0)>0 ORDER BY MCODE,TRNDATE DESC,VCHRNO DESC
	OPEN DOVALUATION_CURSOR
	FETCH NEXT FROM DOVALUATION_CURSOR INTO @VCHRNO,@TRNDATE,@MCODE,@QTY,@RATE,@STOCKQTY, @EXPDATE
	WHILE @@FETCH_STATUS=0
		BEGIN
			IF @MCODE <> @CURRENT_MCODE 
			BEGIN
				SET @CURRENT_MCODE = @MCODE
				SET @LEFTSTOCK = @STOCKQTY
				SET @ISDONE = 0
			END	
		
			IF @ISDONE = 1 
				GOTO LAST
			ELSE
				BEGIN
					IF @LEFTSTOCK >= @QTY    -- IF REMING STOCK IS GREATER THEN OR EQUAL TO BILL QTY
						BEGIN
							SET @MC = @MCODE
							SET @Q = @QTY
							SET @LEFTSTOCK = @LEFTSTOCK - @QTY
							set @RT = @RATE
							INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY, EXPDATE) VALUES(@VCHRNO,@TRNDATE,@MCODE,@Q,@RATE,@Q * @RATE,@QTY, @EXPDATE)
							IF @LEFTSTOCK = 0
								SET @ISDONE = 1
						END
					ELSE
						BEGIN
							SET @MC = @MCODE
							SET @Q = @LEFTSTOCK
							SET @LEFTSTOCK = 0
							set @RT = @RATE
							SET @ISDONE = 1
							INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY, EXPDATE) VALUES(@VCHRNO,@TRNDATE,@MCODE,@Q,@RATE,@Q * @RATE,@QTY, @EXPDATE)
						END
				END
		
	LAST:											
			FETCH NEXT FROM DOVALUATION_CURSOR  INTO @VCHRNO,@TRNDATE,@MCODE,@QTY,@RATE,@STOCKQTY,@EXPDATE
			--PRINT @@FETCH_STATUS
			IF @MCODE <> @CURRENT_MCODE OR @@FETCH_STATUS=-1			 
			
				if @LEFTSTOCK <> 0
				
					BEGIN
						INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY, EXPDATE) VALUES(NULL,NULL,@MC,@LEFTSTOCK,@RT,@LEFTSTOCK * @RT,0, @EXPDATE)
						SET @LEFTSTOCK = 0
						SET @ISDONE = 1
					END
		END		
	CLOSE DOVALUATION_CURSOR
	DEALLOCATE DOVALUATION_CURSOR
	SELECT * FROM 
	(
		SELECT DISTINCT B.MENUCODE, B.DESCA VCHRNO,NULL TRNDATE,NULL PQTY,NULL RATE,NULL STKQTY,NULL AMOUNT,NULL VRATE,A.MCODE MC,'A' FLG, NULL EXPDATE FROM #RESULT A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE
		UNION ALL
		SELECT NULL ITEM,A.VCHRNO,A.TRNDATE,A.PQTY,A.RATE,A.QTY STKQTY,AMOUNT,NULL VRATE,A.MCODE,'B' FLG, EXPDATE FROM #RESULT A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE
		UNION ALL
		SELECT NULL ITEM,'TOTAL >>',NULL,NULL,NULL,SUM(A.QTY) STKQTY,SUM(AMOUNT) AMOUNT,ROUND(SUM(A.AMOUNT)/SUM(A.QTY),10) VRATE,A.MCODE,'C' FLG, NULL EXPDATE FROM #RESULT A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE
		GROUP BY A.MCODE
		UNION ALL
		SELECT DISTINCT NULL, NULL VCHRNO,NULL TRNDATE,NULL PQTY,NULL RATE,NULL STKQTY,NULL AMOUNT,NULL,A.MCODE MC,'D' FLG, NULL EXPDATE FROM #RESULT A
		UNION ALL
		SELECT NULL ITEM,'GRAND TOTAL >>',NULL,NULL,NULL,SUM(A.QTY) STKQTY,SUM(STKVALUE) AMOUNT,NULL VRATE,'ZZZZZZZZZZZZZZZZZZZZ' MCODE,'E' FLG, NULL EXPDATE FROM 
		(
			SELECT ROUND(SUM(AMOUNT)/SUM(QTY),10) * SUM(QTY) STKVALUE,SUM(A.QTY) QTY,A.MCODE FROM #RESULT A GROUP BY A.MCODE
		)A
	) A ORDER BY A.MC,FLG,TRNDATE
