CREATE OR ALTER PROCEDURE [dbo].[RSP_STOCKVALUATION_FIFO] 
--DECLARE
	@DATE DATETIME,
	@PATH VARCHAR(200) ='%',
	@FYID VARCHAR(10),
	@DETAIL TINYINT = 0,
	@ITEM VARCHAR(max) = '%', 
	@DIVISION VARCHAR(3) = '%',
	@JSON VARCHAR(MAX) = '[]'
AS
--SET @DATE = '23 SEP 2022';  SET @DIVISION = 'PKR'; SET @FYID = '78/79'
--SET @ITEM = 'M10010'; 
--SET @DETAIL = 5
--SET @JSON = '[{"MCODE":"M10010","QTY":25},{"MCODE":"M10004","QTY":100}]'
--SET @JSON = '[{"MCODE":"M399","QTY":123.810}]'
--DECLARE @DATE DATETIME = '03-27-18',@PATH VARCHAR(200) ='%',@PHISCALID VARCHAR(20)='%',@ITEM VARCHAR(25)= 'M28744P',@DETAIL TINYINT = 0
--SET @SELECTEDITEMLIST = 'M10000,M10001,M10002,M10003,M10004,M10005,M10007,M10010,M10018'
SET NOCOUNT ON

IF OBJECT_ID('TEMPDB..#ITEMLIST') IS NOT NULL DROP TABLE #ITEMLIST
SELECT MCODE, QTY INTO #ITEMLIST FROM OPENJSON(@JSON) A
CROSS APPLY OPENJSON(A.[VALUE])
WITH
(
	MCODE VARCHAR(25) '$.MCODE',
	QTY NUMERIC(18,5) '$.QTY'
)

IF @DETAIL = 10			--OPENING STOCK VALUE ONLY
BEGIN
	SELECT SUM(A.REALQTY_IN * A.REALRATE) STOCKVALUE FROM RMD_TRNPROD A WITH (NOLOCK) INNER JOIN MENUITEM C WITH (NOLOCK) ON A.MCODE = C.MCODE WHERE A.VCHRNO LIKE 'OP%' AND ISNULL(C.PTYPE,0) <10 
	AND WAREHOUSE IN (SELECT NAME FROM RMD_WAREHOUSE WHERE ISNULL(IsAdjustment,0) =0 AND ISNULL(ISVIRTUAL,0)=0 AND A.DIVISION LIKE @DIVISION) AND A.PHISCALID = @FYID 
	GOTO GOEND
END

DECLARE @SampleAllData TINYINT
DECLARE @IGNOREMINUSTK TINYINT, @IgnoreTRRate VARCHAR(2)
SELECT @IGNOREMINUSTK = ISNULL(IGNOREMINUSSTKINSVALUATION, 0), @SampleAllData = ISNULL(SampleOverallDataForValuation, 0) FROM SETTING
SET @IgnoreTRRate = IIF( COALESCE((SELECT SettingValue FROM ReportSetting WHERE ReportName = 'Stock Valuation Report' AND SettingName = 'IgnoreTransferInRate'),'0')='0', 'TR','')
--TEMPORARY TABLE FOR STOCK VALUATION DETAIL RECORD
----------------------------------------------------
IF OBJECT_ID('TEMPDB..#RESULT') IS NOT NULL DROP TABLE #RESULT
IF OBJECT_ID('TEMPDB..#STOCK') IS NOT NULL DROP TABLE #STOCK
IF OBJECT_ID('TEMPDB..#STOCK1') IS NOT NULL DROP TABLE #STOCK1
IF OBJECT_ID('TEMPDB..#VALUATION_STOCK') IS NOT NULL DROP TABLE #VALUATION_STOCK
CREATE TABLE #RESULT (VCHRNO VARCHAR(25),TRNDATE DATETIME,MCODE VARCHAR(25),PQTY NUMERIC(18,6),QTY NUMERIC(18,6),RATE NUMERIC(18,6),AMOUNT NUMERIC(18,6), EXPDATE DATETIME)

--GETTING STOCK QTY
--------------------

SELECT A.*, W.DIVISION INTO #STOCK1 FROM
(
	SELECT  A.WAREHOUSE, A.MCODE,SUM(REALQTY_IN)-SUM(REALQTY) AS STOCKQTY FROM RMD_TRNPROD A
	INNER JOIN RMD_TRNMAIN B ON A.VCHRNO= B.VCHRNO
	WHERE A.PhiscalID = @FYID AND (B.TRNDATE <=@DATE OR A.VoucherType = 'OP')
	GROUP BY A.MCODE, A.WAREHOUSE  HAVING SUM(REALQTY_IN)-SUM(REALQTY) <> 0
) A
INNER JOIN MENUITEM B ON A.MCODE=B.MCODE
JOIN RMD_WAREHOUSE W ON A.WAREHOUSE = W.[NAME]
WHERE ISNULL(W.IsAdjustment,0) =0 AND ISNULL(W.ISVIRTUAL,0)=0
AND B.PTYPE < 10 --AND ISNULL(B.MCAT,'') LIKE @MENUCAT AND ISNULL(B.MGROUP,'') LIKE @MGROUP AND ISNULL(B.SUPCODE,'') LIKE @SUPPLIER_ACID
AND (@JSON <>'[]' AND (ISNULL(A.MCODE,'') in (select MCODE from #ITEMLIST)) OR (@JSON ='[]' and ISNULL(A.MCODE,'') like @ITEM))


SELECT MCODE, SUM(STOCKQTY) STOCKQTY INTO #VALUATION_STOCK FROM #STOCK1 WHERE @SampleAllData = 1 OR DIVISION LIKE @DIVISION 
GROUP BY MCODE


SELECT MCODE, SUM(STOCKQTY) STOCKQTY INTO #STOCK FROM #STOCK1 WHERE DIVISION LIKE @DIVISION  GROUP BY MCODE

--SELECT * from #stock --WHERE MCODE = 'M29370P' order by mcode

--GETTTING PURCHASE/OPENING/BranchIn RECORD FOR VALUATION
-------------------------------
IF OBJECT_ID('TEMPDB..#DATA') IS NOT NULL DROP TABLE #DATA

SELECT A.VCHRNO,A.TRNDATE,C.MCODE, A.EXPDATE, ISNULL(QTY,0) QTY,ISNULL(RATE,0) RATE,ISNULL(C.STOCKQTY,0) STOCKQTY INTO #DATA FROM #VALUATION_STOCK C 
LEFT JOIN 
(
	SELECT A.VCHRNO,B.TRNDATE,A.MCODE,A.EXPDATE, SUM(REALQTY_IN) QTY,SUM((CASE WHEN ISNULL(A.CRATE,0) = 0 THEN ISNULL(RATE,0) ELSE ISNULL(A.CRATE,0) END) * REALQTY_IN)/sum(REALQTY_IN) AS RATE 
	FROM  RMD_TRNPROD A 
	INNER JOIN RMD_TRNMAIN B ON A.VCHRNO=B.VCHRNO --AND A.DIVISION=B.DIVISION AND ISNULL(A.PHISCALID,'')=ISNULL(B.PHISCALID,'')
	INNER JOIN MENUITEM M ON A.MCODE = M.MCODE
	WHERE  A.PhiscalID = @FYID  AND A.VoucherType IN ('PI','OP','PD','DA',@IgnoreTRRate) AND ISNULL(REALQTY_IN,0) <> 0 
	AND ISNULL(A.WAREHOUSE,'') IN (SELECT NAME FROM RMD_WAREHOUSE WHERE ISNULL(IsAdjustment,0) =0 AND ISNULL(ISVIRTUAL,0)=0 AND (@SampleAllData = 1 OR DIVISION LIKE @DIVISION))
	AND M.PTYPE < 10 AND B.TRNDATE <= @DATE --AND ISNULL(M.MCAT,'') LIKE @MENUCAT AND ISNULL(M.MGROUP,'') LIKE @MGROUP AND ISNULL(M.SUPCODE,'') LIKE @SUPPLIER_ACID
	AND (@JSON <>'[]' AND (ISNULL(A.MCODE,'') in (select MCODE from #ITEMLIST)) OR (@JSON ='[]' and ISNULL(A.MCODE,'') like @ITEM))
	GROUP BY A.VCHRNO,B.TRNDATE,A.MCODE, A.EXPDATE
	HAVING SUM(REALQTY_IN) > 0
) AS A ON C.MCODE=A.MCODE


--PROCESSING RECORD FOR STOCK VALUATION
-----------------------------------------	

--SELECT VCHRNO, TRNDATE, QTY, RATE, STOCKQTY, SUM(QTY) OVER (PARTITION BY MCODE ORDER BY TRNDATE DESC, VCHRNO DESC) CIW_QTY, MCODE, EXPDATE FROM #DATA WHERE MCODE = 'M29370P'
--STOCK CALCULATION LOGIC
--Get CIW_QTY = Cumulative InWardQty  in descending order by transaction time
--If Total Stock is greater than CIW_QTY and its not the last row then all qty in voucher should be available
--Else only total stock - CIW_QTY of previous voucher should be available (also applicable If Total Stock is greater than Total InWard Qty)
--following query does not address -ve stock & if Stock has been added via another method that is not taken in valuation query above

INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY, EXPDATE)
SELECT VCHRNO, TRNDATE, MCODE, STKQTY, RATE, STKQTY * RATE AMOUNT, PQTY, EXPDATE FROM
(
	SELECT VCHRNO, TRNDATE, QTY PQTY, RATE, 
	IIF(STOCKQTY>=CIW_QTY AND LEAD(CIW_QTY) OVER (PARTITION BY MCODE ORDER BY TRNDATE DESC, VCHRNO DESC) IS NOT NULL, QTY, 
		STOCKQTY - ISNULL(LAG(CIW_QTY) OVER (PARTITION BY MCODE ORDER BY TRNDATE DESC, VCHRNO DESC),0)) STKQTY,                        --Remainging Stock/voucher should be total stock left minus cumulative purchase qty of previous voucher
	NULL VRATE, A.MCODE, 'B' FLG, EXPDATE FROM 
	(
		--Get CIW_QTY = Cumulative Purchase/In Qty
		SELECT VCHRNO, TRNDATE, QTY, RATE, S.STOCKQTY, SUM(QTY) OVER (PARTITION BY D.MCODE ORDER BY TRNDATE DESC,VCHRNO DESC) CIW_QTY, D.MCODE, EXPDATE FROM #DATA D
		JOIN #VALUATION_STOCK S ON D.MCODE = S.MCODE --WHERE MCODE = 'M22880P'
	)A 
) B WHERE STKQTY > 0

--SELECT * FROM #RESULT WHERE MCODE = 'M6654' 

IF OBJECT_ID('TEMPDB..#RESULT1') IS NOT NULL DROP TABLE #RESULT1
SELECT S.MCODE, M.MENUCODE, M.DESCA, M.BASEUNIT, S.STOCKQTY QTY, C.RATE 
INTO #RESULT1 FROM #STOCK S LEFT JOIN
(
	SELECT A.MCODE, M.MENUCODE, M.DESCA, M.BASEUNIT, A.QTY, ISNULL(A.RATE, IIF(ISNULL(M.CRATE,0) = 0, M.PRATE_A, M.CRATE)) RATE  FROM
	(
		SELECT A.MCODE, SUM(A.QTY) QTY, SUM(A.RATE * A.QTY)/SUM(A.QTY) RATE FROM #RESULT A WHERE VCHRNO IS NOT NULL GROUP BY A.MCODE
		UNION ALL
		SELECT S.MCODE,S.STOCKQTY QTY, IIF(@IGNOREMINUSTK = 1, 0, NULL) RATE FROM #VALUATION_STOCK S WHERE STOCKQTY < 0 
		UNION ALL 
		SELECT S.MCODE, S.STOCKQTY QTY, NULL RATE FROM #DATA S WHERE STOCKQTY > 0 AND VCHRNO IS NULL
	)  A JOIN MENUITEM M ON A.MCODE = M.MCODE
	/*
	*/
) C ON S.MCODE = C.MCODE
JOIN MENUITEM M ON S.MCODE = M.MCODE

IF @DETAIL = 0			--CLOSING STOCK VALUTION - IN SUMMARY REPORT	
	SELECT *, A.RATE * A.QTY [VALUE] FROM #RESULT1 A ORDER BY A.DESCA 
	
ELSE IF @DETAIL = 1					-- CLOSING STOCK VALUATION REPORT - IN DETAIL
	SELECT * FROM 
	(
		SELECT B.MENUCODE, B.DESCA VCHRNO,NULL TRNDATE,NULL PQTY,NULL RATE,NULL STKQTY,NULL AMOUNT,NULL VRATE,A.MCODE MC,'A' FLG FROM #RESULT1 A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE
		UNION ALL
		SELECT NULL ITEM, A.VCHRNO, A.TRNDATE, A.PQTY, A.RATE, A.QTY STKQTY, AMOUNT, NULL VRATE, A.MCODE,'B' FLG FROM #RESULT A 
		UNION ALL
		SELECT NULL ITEM,'TOTAL >>',NULL,NULL,NULL,A.QTY STKQTY, A.RATE * A.QTY AMOUNT, A.RATE VRATE,A.MCODE,'C' FLG FROM #RESULT1 A
		UNION ALL
		SELECT NULL, NULL VCHRNO,NULL TRNDATE,NULL PQTY,NULL RATE,NULL STKQTY,NULL AMOUNT,NULL,A.MCODE MC,'D' FLG FROM #RESULT1 A
		UNION ALL
		SELECT NULL ITEM,'GRAND TOTAL >>',NULL,NULL,NULL,SUM(A.QTY) STKQTY,SUM(A.QTY * A.RATE) AMOUNT,NULL VRATE,'ZZZZZZZZZZZZZZZZZZZZ' MCODE,'E' FLG FROM #RESULT1 A		
	) A ORDER BY A.MC,FLG,TRNDATE
ELSE IF @DETAIL = 2	-- CLOSING STOCK VALUATION REPORT - IN DETAIL
BEGIN
	SELECT *, A.RATE * A.QTY [VALUE] FROM #RESULT1 A ORDER BY MCODE
	SELECT A.VCHRNO, A.TRNDATE, A.PQTY, A.RATE, A.QTY STKQTY, AMOUNT, SUM(A.QTY) OVER (PARTITION BY MCODE ORDER BY TRNDATE, VCHRNO) CIW_QTY, A.MCODE FROM #RESULT A	
END	
ELSE IF @DETAIL =5 --GET COGS DETAIL FOR ITEMS PROVIDED IN JSON
BEGIN
	SELECT A.MCODE, SUM(A.RATE * A.USED_QTY)/IIF(SUM(A.USED_QTY)=0,1,SUM(A.USED_QTY)) RATE FROM
	(
		SELECT A.MCODE, A.RATE,
		IIF(A.INV_QTY>=A.CIW_QTY, QTY, 
			A.INV_QTY - ISNULL(LAG(A.CIW_QTY) OVER (PARTITION BY A.MCODE ORDER BY TRNDATE, VCHRNO),0)) USED_QTY FROM 
			(
				SELECT A.MCODE, A.VCHRNO, A.TRNDATE, A.RATE, A.QTY, I.QTY INV_QTY, SUM(A.QTY) OVER (PARTITION BY A.MCODE ORDER BY TRNDATE, VCHRNO) CIW_QTY FROM #RESULT A JOIN #ITEMLIST I ON A.MCODE = I.MCODE
			) A
	) A WHERE USED_QTY >0
	GROUP BY A.MCODE

	--USE FOLLOWING LINES FOR DEBUGGING PURPOSE
	/*
	SELECT A.MCODE, A.RATE,
		IIF(A.INV_QTY>=A.CIW_QTY, QTY, 
			A.INV_QTY - ISNULL(LAG(A.CIW_QTY) OVER (PARTITION BY A.MCODE ORDER BY TRNDATE, VCHRNO),0)) USED_QTY FROM 
			(
				SELECT A.MCODE, A.VCHRNO, A.TRNDATE, A.RATE, A.QTY, I.QTY INV_QTY, SUM(A.QTY) OVER (PARTITION BY A.MCODE ORDER BY TRNDATE, VCHRNO) CIW_QTY FROM #RESULT A JOIN #ITEMLIST I ON A.MCODE = I.MCODE
			) A
	SELECT A.MCODE, A.VCHRNO, A.TRNDATE, A.RATE, A.QTY, I.QTY INV_QTY, SUM(A.QTY) OVER (PARTITION BY A.MCODE ORDER BY TRNDATE, VCHRNO) CIW_QTY FROM #RESULT A JOIN #ITEMLIST I ON A.MCODE = I.MCODE
	*/
END
ELSE IF @DETAIL = 50	-- CLOSING STOCK VALUE ONLY	
	SELECT SUM(A.RATE * A.QTY) STKVALUE FROM #RESULT1 A
ELSE IF @DETAIL = 100  -- MCODE WISE STOCK VALUE IN COSTING TABLE FOR STOCK REPORT PURPOSE
BEGIN
	DELETE FROM COSTING
	INSERT INTO COSTING (MCODE,RATE) SELECT A.MCODE, A.RATE FROM #RESULT1 A
END
ELSE IF @DETAIL = 101  -- MCODE WISE STOCK VALUE IN COSTING TABLE FOR STOCK REPORT PURPOSE
BEGIN			
	DELETE FROM COSTING_DAYWISE WHERE TRNDATE = @DATE
	INSERT INTO COSTING_DAYWISE (TRNDATE, MCODE,RATE) SELECT @DATE, A.MCODE, RATE FROM #RESULT1 A
END		

GOEND:
SET NOCOUNT OFF