CREATE OR ALTER PROCEDURE [dbo].[NSP_STOCKVALUATIONREPORT_DIVISIONWISE] 
	@DATE DATETIME,@PATH VARCHAR(200) ='%',@PHISCALID VARCHAR(20)='%',@DETAIL TINYINT = 0,@ITEM VARCHAR(25) = '%', @DoValuation tinyint = 1,@FIFO VARCHAR(1) = 'F',@DIVISION VARCHAR(3) = '%'
	
AS
--DECLARE @DATE DATETIME = '03-27-18',@PATH VARCHAR(200) ='%',@PHISCALID VARCHAR(20)='%',@ITEM VARCHAR(25)= 'M28744P',@DETAIL TINYINT = 0

SET NOCOUNT ON


DECLARE @IGNOREMINUSTK TINYINT
SELECT @IGNOREMINUSTK = ISNULL(IGNOREMINUSSTKINSVALUATION, 0) FROM SETTING

if @DETAIL = 10			--OPENING STOCK VALUE ONLY
	BEGIN
		SELECT ISNULL(SUM(A.REALQTY_IN * A.REALRATE), 0) STOCKVALUE FROM RMD_TRNPROD A INNER JOIN MENUITEM C ON A.MCODE = C.MCODE WHERE A.VCHRNO LIKE 'OP%' AND ISNULL(C.PTYPE,0) <10 
		AND ISNULL(A.WAREHOUSE,'') IN (SELECT NAME FROM RMD_WAREHOUSE WHERE ISNULL(IsAdjustment,0) =0 AND ISNULL(ISVIRTUAL,0)=0 AND ISNULL(DIVISION,'') LIKE @DIVISION)
		GOTO GOEND
	END

--TEMPORARY TABLE FOR STOCK VALUATION DETAIL RECORD
----------------------------------------------------
IF OBJECT_ID('TEMPDB..#RESULT') IS NOT NULL DROP TABLE #RESULT
CREATE TABLE #RESULT (VCHRNO VARCHAR(25),TRNDATE DATETIME,MCODE VARCHAR(25),PQTY NUMERIC(18,6),QTY NUMERIC(18,6),RATE NUMERIC(18,6),AMOUNT NUMERIC(18,6))

--GETTING STOCK QTY
--------------------
IF OBJECT_ID('TEMPDB..#STOCK') IS NOT NULL DROP TABLE #STOCK

SELECT A.MCODE,SUM(REALQTY_IN)-SUM(REALQTY) AS STOCKQTY  INTO #STOCK FROM RMD_TRNPROD A 
INNER JOIN RMD_TRNMAIN B ON A.VCHRNO= B.VCHRNO AND A.DIVISION=B.DIVISION AND ISNULL(A.PHISCALID,'')=ISNULL(B.PHISCALID,'') INNER JOIN MENUITEM C ON A.MCODE=C.MCODE
WHERE B.TRNDATE <= @DATE AND ISNULL(A.PHISCALID,'') LIKE @PHISCALID AND ISNULL(C.PATH,'') LIKE @PATH AND C.PTYPE < 10 AND A.MCODE LIKE @ITEM
AND ISNULL(A.WAREHOUSE,'') IN (SELECT NAME FROM RMD_WAREHOUSE WHERE ISNULL(IsAdjustment,0) =0 AND ISNULL(ISVIRTUAL,0)=0 AND ISNULL(DIVISION,'') LIKE @DIVISION)
GROUP BY A.MCODE  HAVING SUM(REALQTY_IN)-SUM(REALQTY) <> 0

--Select * from #stock order by mcode

IF @DoValuation = 0 OR @FIFO <> 'F' --IF NO NEED TO DO VALUATION OR VALUATION MODE IS NOT FIFO
BEGIN
	INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY) 
	SELECT NULL VNO,NULL TDATE,A.MCODE,A.STOCKQTY,ISNULL(B.RATE,0) RATE,ISNULL(B.RATE,0) * A.STOCKQTY,0 PQTY FROM #STOCK A LEFT JOIN COSTING B ON A.MCODE = B.MCODE

	GOTO SKIP_VALUATION
END

--GETTTING RECORD FOR VALUATION
-------------------------------
	IF OBJECT_ID('TEMPDB..#DATA') IS NOT NULL DROP TABLE #DATA

	SELECT A.VCHRNO,A.TRNDATE,C.MCODE,ISNULL(QTY,0) QTY,ISNULL(RATE,0) RATE,ISNULL(C.STOCKQTY,0) STOCKQTY INTO #DATA FROM #STOCK C 
	LEFT JOIN 
	(SELECT A.VCHRNO,B.TRNDATE,A.MCODE,SUM(REALQTY_IN) QTY,SUM((CASE WHEN ISNULL(CRATE,0) = 0 THEN ISNULL(RATE,0) ELSE ISNULL(CRATE,0) END) * REALQTY_IN)/sum(realqty_in) AS RATE 
	FROM  RMD_TRNPROD A INNER JOIN RMD_TRNMAIN B ON A.VCHRNO=B.VCHRNO AND A.DIVISION=B.DIVISION AND ISNULL(A.PHISCALID,'')=ISNULL(B.PHISCALID,'')
	WHERE LEFT(A.VCHRNO,2) IN ('PI','OP','TR') AND ISNULL(A.PHISCALID,'') LIKE @PHISCALID  AND B.TRNDATE <= @DATE AND ISNULL(REALQTY_IN,0) <> 0 
	AND ISNULL(A.WAREHOUSE,'') IN (SELECT NAME FROM RMD_WAREHOUSE WHERE ISNULL(IsAdjustment,0) =0 AND ISNULL(ISVIRTUAL,0)=0 AND ISNULL(DIVISION,'') LIKE @DIVISION)
	GROUP BY A.VCHRNO,B.TRNDATE,A.MCODE
	) AS A ON C.MCODE=A.MCODE

	--select * from #data WHERE MCODE = 'M48661P' order by mcode

	--PROCESSING RECORD FOR STOCK VALUATION
	-----------------------------------------	
	DECLARE @VCHRNO VARCHAR(25),@TRNDATE DATETIME,@MCODE VARCHAR(25),@QTY NUMERIC(18,6),@RATE NUMERIC(18,6),@STOCKQTY NUMERIC(18,6)
	DECLARE @CURRENT_MCODE VARCHAR(25)='',@PQTY NUMERIC(18,6)=0
	DECLARE @LEFTSTOCK NUMERIC(18,6) =0
	DECLARE @RT AS NUMERIC(18,6) = 0,@Q AS NUMERIC(18,6),@ISDONE TINYINT =0,@MC VARCHAR(25)

	--PURCHASE/OPENING MISSING RECORD
	----------------------------------
	INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY) 
	SELECT NULL VNO,NULL TDATE,A.MCODE,A.STOCKQTY,CASE WHEN ISNULL(B.CRATE,0) = 0 THEN ISNULL(B.PRATE_A,0) ELSE ISNULL(B.CRATE,0) END RATE,
	(CASE WHEN ISNULL(B.CRATE,0) = 0 THEN ISNULL(B.PRATE_A,0) ELSE ISNULL(B.CRATE,0) END) * A.STOCKQTY,0 PQTY FROM #DATA A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE
	WHERE ISNULL(VCHRNO,'') = '' AND  ISNULL(A.STOCKQTY,0) > 0

	--NEGETIVE STOCK RECORD
	-----------------------
	IF @IGNOREMINUSTK = 0
		INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY) 
		SELECT DISTINCT NULL VNO,NULL TDATE,A.MCODE,A.STOCKQTY,
		CASE WHEN @IGNOREMINUSTK = 0 THEN CASE WHEN ISNULL(B.CRATE,0) = 0 THEN ISNULL(B.PRATE_A,0) ELSE ISNULL(B.CRATE,0) END ELSE 0 END RATE,
		(CASE WHEN @IGNOREMINUSTK = 0 THEN CASE WHEN ISNULL(B.CRATE,0) = 0 THEN ISNULL(B.PRATE_A,0) ELSE ISNULL(B.CRATE,0) END ELSE 0 END) * A.STOCKQTY,0 PQTY
		FROM #DATA A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE WHERE  ISNULL(A.STOCKQTY,0) < 0
	ELSE
		INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY) 
		SELECT DISTINCT NULL VNO,NULL TDATE,A.MCODE,A.STOCKQTY,0,0,0 PQTY
		FROM #DATA A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE WHERE ISNULL(A.STOCKQTY,0) < 0

	--POSTIVE STOCK WITH PURCHASE/OPENING RECORD
	---------------------------------------------
	DECLARE DOVALUATION_CURSOR CURSOR FOR 
		SELECT VCHRNO,TRNDATE,MCODE,QTY,RATE,STOCKQTY FROM #DATA WHERE ISNULL(VCHRNO,'') <> '' AND ISNULL(STOCKQTY,0)>0 ORDER BY MCODE,TRNDATE DESC,VCHRNO DESC
	OPEN DOVALUATION_CURSOR
	FETCH NEXT FROM DOVALUATION_CURSOR INTO @VCHRNO,@TRNDATE,@MCODE,@QTY,@RATE,@STOCKQTY
	WHILE @@FETCH_STATUS=0
		BEGIN
			IF @MCODE <> @CURRENT_MCODE 
			BEGIN
				SET @CURRENT_MCODE = @MCODE
				SET @LEFTSTOCK = @STOCKQTY
				SET @ISDONE = 0
			END	
		
			IF @ISDONE = 1 
				GOTO LAST
			ELSE
				BEGIN
					IF @LEFTSTOCK >= @QTY    -- IF REMING STOCK IS GREATER THEN OR EQUAL TO BILL QTY
						BEGIN
							SET @MC = @MCODE
							SET @Q = @QTY
							SET @LEFTSTOCK = @LEFTSTOCK - @QTY
							set @RT = @RATE
							INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY) VALUES(@VCHRNO,@TRNDATE,@MCODE,@Q,@RATE,@Q * @RATE,@QTY)
							IF @LEFTSTOCK = 0
								SET @ISDONE = 1
						END
					ELSE
						BEGIN
							SET @MC = @MCODE
							SET @Q = @LEFTSTOCK
							SET @LEFTSTOCK = 0
							set @RT = @RATE
							SET @ISDONE = 1
							INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY) VALUES(@VCHRNO,@TRNDATE,@MCODE,@Q,@RATE,@Q * @RATE,@QTY)
						END
				END
		
	LAST:											
			FETCH NEXT FROM DOVALUATION_CURSOR  INTO @VCHRNO,@TRNDATE,@MCODE,@QTY,@RATE,@STOCKQTY
			--PRINT @@FETCH_STATUS
			IF @MCODE <> @CURRENT_MCODE OR @@FETCH_STATUS=-1			 
			
				if @LEFTSTOCK <> 0
				
					BEGIN
						INSERT INTO #RESULT(VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY) VALUES(NULL,NULL,@MC,@LEFTSTOCK,@RT,@LEFTSTOCK * @RT,0)
						SET @LEFTSTOCK = 0
						SET @ISDONE = 1
					END
		END		
	CLOSE DOVALUATION_CURSOR
	DEALLOCATE DOVALUATION_CURSOR
--select * from #result  ORDER BY MCODE

SKIP_VALUATION:

IF @DETAIL = 0			--CLOSING STOCK VALUTION - IN SUMMARY REPORT
	BEGIN
		IF @FIFO = 'F'
			SELECT B.MENUCODE, B.DESCA,B.BASEUNIT,SUM(QTY) STOCK,ROUND(SUM(AMOUNT)/SUM(QTY),10) RATE ,ROUND(SUM(AMOUNT)/SUM(QTY),10) * SUM(QTY) VALUE,A.MCODE FROM #RESULT A INNER JOIN MENUITEM B ON A.MCODE=B.MCODE   
			GROUP BY A.MCODE,B.MENUCODE,B.DESCA,B.BASEUNIT  ORDER BY B.DESCA 
		ELSE
			SELECT B.MENUCODE, B.DESCA,B.BASEUNIT,A.STOCKQTY STOCK,
			CASE WHEN A.STOCKQTY < 0 AND @IGNOREMINUSTK = 1 THEN 0 ELSE B.RATE END RATE,			
			(CASE WHEN A.STOCKQTY < 0 AND @IGNOREMINUSTK = 1 THEN 0 ELSE B.RATE END)*A.STOCKQTY AS STKVALUE,
			A.MCODE FROM #STOCK A 
			INNER JOIN 
			(SELECT MCODE,MENUCODE,DESCA,BASEUNIT,CASE WHEN ISNULL(B.CRATE,0) = 0 THEN ISNULL(B.PRATE_A,0) ELSE ISNULL(B.CRATE,0) END RATE FROM MENUITEM B WHERE TYPE = 'A')
			B ON A.MCODE=B.MCODE ORDER BY B.DESCA 
	END

	
ELSE IF @DETAIL = 1					-- CLOSING STOCK VALUATION REPORT - IN DETAIL

	SELECT * FROM 
	(
	SELECT DISTINCT B.MENUCODE, B.DESCA VCHRNO,NULL TRNDATE,NULL PQTY,NULL RATE,NULL STKQTY,NULL AMOUNT,NULL VRATE,A.MCODE MC,'A' FLG FROM #RESULT A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE
	UNION ALL
	SELECT NULL ITEM,A.VCHRNO,A.TRNDATE,A.PQTY,A.RATE,A.QTY STKQTY,AMOUNT,NULL VRATE,A.MCODE,'B' FLG FROM #RESULT A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE
	UNION ALL
	SELECT NULL ITEM,'TOTAL >>',NULL,NULL,NULL,SUM(A.QTY) STKQTY,SUM(AMOUNT) AMOUNT,ROUND(SUM(A.AMOUNT)/SUM(A.QTY),10) VRATE,A.MCODE,'C' FLG FROM #RESULT A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE
	GROUP BY A.MCODE
	UNION ALL
	SELECT DISTINCT NULL, NULL VCHRNO,NULL TRNDATE,NULL PQTY,NULL RATE,NULL STKQTY,NULL AMOUNT,NULL,A.MCODE MC,'D' FLG FROM #RESULT A
	UNION ALL
	SELECT NULL ITEM,'GRAND TOTAL >>',NULL,NULL,NULL,SUM(A.QTY) STKQTY,SUM(STKVALUE) AMOUNT,NULL VRATE,'ZZZZZZZZZZZZZZZZZZZZ' MCODE,'E' FLG FROM 
	(
	SELECT ROUND(SUM(AMOUNT)/SUM(QTY),10) * SUM(QTY) STKVALUE,SUM(A.QTY) QTY,A.MCODE FROM #RESULT A GROUP BY A.MCODE
	)A
	) A ORDER BY A.MC,FLG,TRNDATE
	
ELSE IF @DETAIL = 50	-- CLOSING STOCK VALUE ONLY	
	BEGIN
		IF @FIFO = 'F'
			BEGIN
				IF @DOVALUATION = 1
					BEGIN
						DELETE FROM COSTING			
						INSERT INTO COSTING (MCODE,RATE) SELECT A.MCODE,ROUND(SUM(AMOUNT)/SUM(QTY),10) FROM #RESULT A INNER JOIN MENUITEM B ON A.MCODE=B.MCODE   
						GROUP BY A.MCODE
					END

				SELECT SUM(STKVALUE)STOCKVALUE FROM
				(
					SELECT ROUND(SUM(AMOUNT)/SUM(QTY),10) * SUM(QTY) STKVALUE,A.MCODE FROM #RESULT A    
					GROUP BY A.MCODE
				) A
			END
		ELSE			
			SELECT SUM(STKVALUE)STOCKVALUE FROM
			(
			SELECT 
			(CASE WHEN @IGNOREMINUSTK = 0 THEN CASE WHEN ISNULL(B.CRATE,0) = 0 THEN ISNULL(B.PRATE_A,0) ELSE ISNULL(B.CRATE,0) END ELSE 0 END)* SUM(QTY) STKVALUE,A.MCODE 
			FROM #RESULT A INNER JOIN MENUITEM B ON A.MCODE=B.MCODE GROUP BY A.MCODE, B.CRATE, B.PRATE_A
			) A
	END

ELSE IF @DETAIL = 100  -- MCODE WISE STOCK VALUE IN COSTING TABLE FOR STOCK REPORT PURPOSE

	BEGIN
		IF @FIFO = 'F'
			BEGIN
				DELETE FROM COSTING
				INSERT INTO COSTING (MCODE,RATE) SELECT A.MCODE,ROUND(SUM(AMOUNT)/SUM(QTY),10) FROM #RESULT A INNER JOIN MENUITEM B ON A.MCODE=B.MCODE   
				GROUP BY A.MCODE
			END
		ELSE
			BEGIN
				DELETE FROM COSTING
				INSERT INTO COSTING (MCODE,RATE) 
				SELECT A.MCODE,
				CASE WHEN @IGNOREMINUSTK = 0 THEN CASE WHEN ISNULL(B.CRATE,0) = 0 THEN ISNULL(B.PRATE_A,0) ELSE ISNULL(B.CRATE,0) END ELSE 0 END RATE
				FROM #RESULT A INNER JOIN MENUITEM B ON A.MCODE=B.MCODE GROUP BY A.MCODE
			END 
	END

	GOEND:
