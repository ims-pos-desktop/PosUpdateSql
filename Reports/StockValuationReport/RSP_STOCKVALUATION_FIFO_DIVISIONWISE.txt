/***
27 FEB 2023 : Revised to fix following issue
***Valuation change for -ve stock & purchase/opening missing stock
***Removed IgnoreNegativeStockValuation/IgnoreTRVRate/SampleOverallData settings
***BranchWiseValuation is summed up for all branch valuations
***/
CREATE OR ALTER PROCEDURE [dbo].[RSP_STOCKVALUATION_FIFO_DIVISIONWISE] 
--DECLARE
	@DATE DATETIME,
	@PATH VARCHAR(200) ='%',
	@FYID VARCHAR(10),
	@DETAIL TINYINT = 0,
	@ITEM VARCHAR(max) = '%', 
	@DIVISION VARCHAR(3) = '%',
	@JSON VARCHAR(MAX) = '[]',
	@IsStampWise TINYINT = 0
AS

--SET @DATE = '26 FEB 2023';  SET @DIVISION = '%'; SET @FYID = '79/80'
--SET @ITEM = 'M10'; 
--SET @DETAIL = 0
--SET @JSON = '[{"MCODE":"M10","QTY":25},{"MCODE":"M12","QTY":100}]'
--DECLARE @DATE DATETIME = '03-27-18',@PATH VARCHAR(200) ='%',@PHISCALID VARCHAR(20)='%',@ITEM VARCHAR(25)= 'M28744P',@DETAIL TINYINT = 0
SET NOCOUNT ON
/* Variable Declarations */
DECLARE @TrnTime VARCHAR(10);
SET @TrnTime = IIF(@IsStampWise = 1,NULL, '00:00:00')
PRINT @TrnTime
/* Table Declarations */
IF OBJECT_ID('TEMPDB..#RESULT') IS NOT NULL DROP TABLE #RESULT
IF OBJECT_ID('TEMPDB..#STOCK') IS NOT NULL DROP TABLE #STOCK
IF OBJECT_ID('TEMPDB..#STOCK1') IS NOT NULL DROP TABLE #STOCK1
IF OBJECT_ID('TEMPDB..#VALUATION_STOCK') IS NOT NULL DROP TABLE #VALUATION_STOCK
IF OBJECT_ID('TEMPDB..#DATA') IS NOT NULL DROP TABLE #DATA
IF OBJECT_ID('TEMPDB..#CostMissingItems') IS NOT NULL DROP TABLE #CostMissingItems
IF OBJECT_ID('TEMPDB..#ITEMLIST') IS NOT NULL DROP TABLE #ITEMLIST
IF OBJECT_ID('TEMPDB..#BranchWiseResult') IS NOT NULL DROP TABLE #BranchWiseResult
IF OBJECT_ID('TEMPDB..#SummaryResult') IS NOT NULL DROP TABLE #SummaryResult
CREATE TABLE #CostMissingItems (DIVISOIN VARCHAR(3) NOT NULL, VCHRNO VARCHAR(25) NULL, VAL_DATE DATE NOT NULL,MCODE VARCHAR (25) NOT NULL,VAL_RATE NUMERIC(18,6) NULL)
CREATE TABLE #RESULT (DIVISION VARCHAR(3) NOT NULL, VCHRNO VARCHAR(25),TRNDATE DATETIME,MCODE VARCHAR(25),PQTY NUMERIC(18,6),QTY NUMERIC(18,6),RATE NUMERIC(18,6),AMOUNT NUMERIC(18,6), EXPDATE DATETIME)
CREATE TABLE #ITEMLIST (MCODE VARCHAR(25) NOT NULL, QTY DECIMAL NULL)


/**** Product Filter 
Filter products on the basis of parameters into a Temp Table
*****/
IF (ISJSON(@JSON) = 0) 
	RAISERROR ('Invalid Json String',10,0)
IF (@JSON <> '[]')
	INSERT INTO #ITEMLIST
	SELECT B.MCODE, B.QTY FROM MENUITEM MI JOIN OPENJSON(@JSON) A
	CROSS APPLY OPENJSON(A.[VALUE])
	WITH
	(
		MCODE VARCHAR(25) '$.MCODE',
		QTY NUMERIC(18,5) '$.QTY'
	) B ON MI.MCODE = B.MCODE
	WHERE MI.PTYPE < 10
ELSE 
	INSERT INTO #ITEMLIST
	SELECT MCODE, 0 FROM MENUITEM WHERE PTYPE < 10 AND MCODE LIKE @ITEM AND ISNULL([PATH],'') LIKE @PATH

/**** End Product Filter *****/

IF @DETAIL = 10			--OPENING STOCK VALUE ONLY
BEGIN
	SELECT SUM(A.REALQTY_IN * A.REALRATE) STOCKVALUE FROM RMD_TRNPROD A WITH (NOLOCK) INNER JOIN MENUITEM C WITH (NOLOCK) ON A.MCODE = C.MCODE WHERE A.VCHRNO LIKE 'OP%' AND ISNULL(C.PTYPE,0) <10 
	AND WAREHOUSE IN (SELECT NAME FROM RMD_WAREHOUSE WHERE ISNULL(IsAdjustment,0) =0 AND ISNULL(ISVIRTUAL,0)=0 AND A.DIVISION LIKE @DIVISION) AND A.PHISCALID = @FYID 
	GOTO GOEND
END

/*** Get Stock Summary ***/

SELECT W.DIVISION, A.MCODE, SUM(A.STOCKQTY) STOCKQTY INTO #STOCK FROM
(
	SELECT  A.WAREHOUSE, A.MCODE,SUM(REALQTY_IN)-SUM(REALQTY) AS STOCKQTY FROM RMD_TRNPROD A
	INNER JOIN RMD_TRNMAIN B ON A.VCHRNO= B.VCHRNO
	WHERE A.PhiscalID = @FYID AND (B.TRNDATE + COALESCE(@TRNTIME, B.TRNTIME) <=@DATE OR A.VoucherType = 'OP')
	GROUP BY A.MCODE, A.WAREHOUSE  HAVING SUM(REALQTY_IN)-SUM(REALQTY) <> 0
) A
INNER JOIN #ITEMLIST B ON A.MCODE=B.MCODE
JOIN RMD_WAREHOUSE W ON A.WAREHOUSE = W.[NAME]
WHERE ISNULL(W.IsAdjustment,0) =0 AND ISNULL(W.ISVIRTUAL,0)=0
AND W.DIVISION LIKE @DIVISION
GROUP BY W.DIVISION, A.MCODE

--GETTTING PURCHASE/OPENING/BranchIn RECORD FOR VALUATION

SELECT A.DIVISION, A.VCHRNO,A.TRNDATE,C.MCODE, A.EXPDATE, ISNULL(QTY,0) QTY,ISNULL(RATE,0) RATE,ISNULL(C.STOCKQTY,0) STOCKQTY INTO #DATA FROM #STOCK C 
LEFT JOIN 
(	
	SELECT W.DIVISION, A.VCHRNO,B.TRNDATE + COALESCE(@TRNTIME, B.TRNTIME) TRNDATE,A.MCODE,A.EXPDATE, SUM(REALQTY_IN) QTY,SUM(COALESCE(NULLIF(A.CRATE,0), A.RATE) * REALQTY_IN)/SUM(REALQTY_IN) AS RATE 
	FROM  RMD_TRNPROD A 
	INNER JOIN RMD_TRNMAIN B ON A.VCHRNO = B.VCHRNO
	INNER JOIN #ITEMLIST M ON A.MCODE = M.MCODE
	JOIN 
	(
		SELECT [NAME], DIVISION FROM RMD_WAREHOUSE WHERE ISNULL(IsAdjustment,0) =0 AND ISNULL(ISVIRTUAL,0)=0
	) W ON A.WAREHOUSE = W.[NAME]
	WHERE  A.PhiscalID = @FYID  AND A.VoucherType IN ('PI','OP','PD','DA','DM','SA','TR') AND ISNULL(REALQTY_IN,0) <> 0 
	AND W.DIVISION LIKE @DIVISION AND B.TRNDATE  + COALESCE(@TRNTIME, B.TRNTIME) <= @DATE	
	GROUP BY W.DIVISION, A.VCHRNO,B.TRNDATE + COALESCE(@TRNTIME, B.TRNTIME),A.MCODE, A.EXPDATE
	HAVING SUM(REALQTY_IN) > 0
) AS A ON C.MCODE=A.MCODE AND A.DIVISION = C.DIVISION


--PROCESSING RECORD FOR STOCK VALUATION
-----------------------------------------	

--SELECT VCHRNO, TRNDATE, QTY, RATE, STOCKQTY, SUM(QTY) OVER (PARTITION BY MCODE ORDER BY TRNDATE DESC, VCHRNO DESC) CIW_QTY, MCODE, EXPDATE FROM #DATA WHERE MCODE = 'M29370P'
--STOCK CALCULATION LOGIC
--Get CIW_QTY = Cumulative InWardQty  in descending order by transaction time
--If Total Stock is greater than CIW_QTY and its not the last row then all qty in voucher should be available
--Else only total stock - CIW_QTY of previous voucher should be available (also applicable If Total Stock is greater than Total InWard Qty)
--following query does not address -ve stock & if Stock has been added via another method that is not taken in valuation query above

INSERT INTO #RESULT(DIVISION,VCHRNO,TRNDATE,MCODE,QTY,RATE,AMOUNT,PQTY, EXPDATE)
SELECT DIVISION,VCHRNO, TRNDATE, MCODE, STKQTY, RATE, STKQTY * RATE AMOUNT, PQTY, EXPDATE FROM
(
	SELECT DIVISION,VCHRNO, TRNDATE, QTY PQTY, RATE, 
	IIF(STOCKQTY>=CIW_QTY AND LEAD(CIW_QTY) OVER (PARTITION BY DIVISION,MCODE ORDER BY TRNDATE DESC, VCHRNO DESC) IS NOT NULL, QTY, 
		STOCKQTY - ISNULL(LAG(CIW_QTY) OVER (PARTITION BY DIVISION,MCODE ORDER BY TRNDATE DESC, VCHRNO DESC),0)) STKQTY,      --Remainging Stock/voucher should be total stock left minus cumulative purchase qty of previous voucher
	NULL VRATE, A.MCODE, 'B' FLG, EXPDATE FROM 
	(
		--Get CIW_QTY = Cumulative Purchase/In Qty
		SELECT D.DIVISION,VCHRNO, TRNDATE, QTY, RATE, S.STOCKQTY, SUM(QTY) OVER (PARTITION BY D.DIVISION,D.MCODE ORDER BY TRNDATE DESC,VCHRNO DESC) CIW_QTY, D.MCODE, EXPDATE FROM #DATA D
		JOIN #STOCK S ON D.MCODE = S.MCODE AND D.DIVISION = S.DIVISION --WHERE MCODE = 'M22880P'
	)A 
) B WHERE STKQTY > 0


--PROCESSING STOCK WITH EVERCHANGING RATE FOR REPORT CONSISTENCY
-------------------------------------------------------------------

DECLARE @CostMissingItemsJson VARCHAR(MAX)

--INSERT INTO #CostMissingItems(VAL_DATE, MCODE)
SET @CostMissingItemsJson = 
(
	SELECT MCODE FROM
	(
		SELECT MCODE FROM #RESULT WHERE QTY > 0 AND VCHRNO IS NULL
		UNION
		SELECT MCODE FROM #STOCK WHERE STOCKQTY<0 
	) A FOR JSON AUTO
) 
--PRINT @CostMissingItemsJson
IF @CostMissingItemsJson <> ''
BEGIN
	INSERT INTO #CostMissingItems
	SELECT C.DIVISION, C.VCHRNO, CONVERT(DATE,@DATE) [DATE],C.MCODE,C.VAL_RATE FROM FN_GetLastValuationRate(@DATE, @CostMissingItemsJson, @DIVISION, @FYID, 'TR') C
END

--SELECT * FROM #CostMissingItems


SELECT S.DIVISION, S.MCODE, M.MENUCODE, M.DESCA, M.BASEUNIT, S.STOCKQTY QTY, C.RATE 
INTO #BranchWiseResult FROM #STOCK S LEFT JOIN
(
	SELECT A.DIVISION, A.MCODE, M.MENUCODE, M.DESCA, M.BASEUNIT, A.QTY, COALESCE(A.RATE, NULLIF(M.CRATE, 0), M.PRATE_A) RATE  FROM
	(
		SELECT DIVISION, A.MCODE, SUM(A.QTY) QTY, SUM(A.RATE * A.QTY)/SUM(A.QTY) RATE FROM #RESULT A WHERE VCHRNO IS NOT NULL GROUP BY A.MCODE, A.DIVISION
		UNION ALL
		SELECT S.DIVISION, S.MCODE,S.STOCKQTY QTY, V.VAL_RATE RATE FROM #STOCK S LEFT JOIN #CostMissingItems V WITH (NOLOCK) ON S.MCODE = V.MCODE AND V.VAL_DATE = CONVERT(DATE,@DATE) AND S.DIVISION = V.DIVISOIN WHERE STOCKQTY < 0 
		UNION ALL 
		SELECT S.DIVISION, S.MCODE, S.STOCKQTY QTY, V.VAL_RATE RATE FROM #DATA S LEFT JOIN #CostMissingItems V WITH (NOLOCK) ON S.MCODE = V.MCODE AND V.VAL_DATE = CONVERT(DATE,@DATE) AND S.DIVISION = V.DIVISOIN WHERE STOCKQTY > 0 AND S.VCHRNO IS NULL
	)  A JOIN MENUITEM M ON A.MCODE = M.MCODE
) C ON S.MCODE = C.MCODE AND S.DIVISION = C.DIVISION
JOIN MENUITEM M ON S.MCODE = M.MCODE 

SELECT MCODE, MENUCODE, DESCA, BASEUNIT, SUM(QTY) QTY, IIF(SUM(A.QTY) = 0, 0, SUM(A.RATE * A.QTY)/SUM(A.QTY)) RATE, SUM(A.RATE * A.QTY) [VALUE] INTO #SummaryResult FROM #BranchWiseResult A GROUP BY MCODE, MENUCODE, DESCA, BASEUNIT

IF @DETAIL = 0			--CLOSING STOCK VALUTION - IN SUMMARY REPORT	
	SELECT * FROM #SummaryResult ORDER BY DESCA 
	
ELSE IF @DETAIL = 1					-- CLOSING STOCK VALUATION REPORT - IN DETAIL
	SELECT * FROM 
	(
		SELECT B.MENUCODE, B.DESCA VCHRNO,NULL TRNDATE,NULL PQTY,NULL RATE,NULL STKQTY,NULL AMOUNT,NULL VRATE,A.MCODE MC,'A' FLG FROM #SummaryResult A INNER JOIN MENUITEM B ON A.MCODE = B.MCODE
		UNION ALL
		SELECT NULL ITEM, A.VCHRNO, A.TRNDATE, A.PQTY, A.RATE, A.QTY STKQTY, AMOUNT, NULL VRATE, A.MCODE,'B' FLG FROM #RESULT A 
		UNION ALL
		SELECT NULL ITEM,'TOTAL >>',NULL,NULL,NULL,A.QTY STKQTY, A.RATE * A.QTY AMOUNT, A.RATE VRATE,A.MCODE,'C' FLG FROM #SummaryResult A
		UNION ALL
		SELECT NULL, NULL VCHRNO,NULL TRNDATE,NULL PQTY,NULL RATE,NULL STKQTY,NULL AMOUNT,NULL,A.MCODE MC,'D' FLG FROM #SummaryResult A
		UNION ALL
		SELECT NULL ITEM,'GRAND TOTAL >>',NULL,NULL,NULL,SUM(A.QTY) STKQTY,SUM(A.QTY * A.RATE) AMOUNT,NULL VRATE,'ZZZZZZZZZZZZZZZZZZZZ' MCODE,'E' FLG FROM #SummaryResult A		
	) A ORDER BY A.MC,FLG,TRNDATE

/*** Get Closing Stock Valuation & Detail to be shown in the Product Master***/
ELSE IF @DETAIL = 2	-- CLOSING STOCK VALUATION REPORT - IN DETAIL
BEGIN
	SELECT * FROM #SummaryResult A ORDER BY MCODE
	SELECT A.VCHRNO, A.TRNDATE, A.PQTY, A.RATE, A.QTY STKQTY, AMOUNT, SUM(A.QTY) OVER (PARTITION BY MCODE ORDER BY TRNDATE, VCHRNO) CIW_QTY, A.MCODE FROM #RESULT A	
END	
/*** Get Cost of Goods Sold Detail (Batch Like Information) for items provided in JSON 
**** Used in [ABB/TRN]PROD_COGS ***/
ELSE IF @DETAIL =3 --GET COGS DETAIL FOR ITEMS PROVIDED IN JSON
BEGIN
	SELECT A.VCHRNO, A.MCODE, A.RATE, A.USED_QTY FROM
	(
		SELECT A.VCHRNO, A.MCODE, A.RATE,
			IIF(A.INV_QTY>=A.CIW_QTY, QTY, 
				A.INV_QTY - ISNULL(LAG(A.CIW_QTY) OVER (PARTITION BY A.MCODE ORDER BY TRNDATE, VCHRNO),0)) USED_QTY FROM 
				(
					SELECT A.MCODE, A.VCHRNO, A.TRNDATE, A.RATE, A.QTY, I.QTY INV_QTY, SUM(A.QTY) OVER (PARTITION BY A.MCODE ORDER BY TRNDATE, VCHRNO) CIW_QTY FROM #RESULT A JOIN #ITEMLIST I ON A.MCODE = I.MCODE
				) A
	) A WHERE A.USED_QTY > 0
		UNION ALL
		SELECT C.VCHRNO, C.MCODE, C.VAL_RATE, I.QTY FROM #CostMissingItems C JOIN #ITEMLIST I ON C.MCODE = I.MCODE
END
/***Branch wise valuation report***/
IF @DETAIL = 4			
	SELECT *, A.QTY * A.RATE [VALUE] FROM #BranchWiseResult A ORDER BY A.DESCA 
/*** Get Cost of Goods Sold for items provided in JSON 
**** Used in Receipe Consumption***/
ELSE IF @DETAIL =5 
BEGIN
	SELECT A.MCODE, SUM(A.RATE * A.USED_QTY)/IIF(SUM(A.USED_QTY)=0,1,SUM(A.USED_QTY)) RATE FROM
	(
		SELECT A.MCODE, A.RATE,
		IIF(A.INV_QTY>=A.CIW_QTY, QTY, 
			A.INV_QTY - ISNULL(LAG(A.CIW_QTY) OVER (PARTITION BY A.MCODE ORDER BY TRNDATE, VCHRNO),0)) USED_QTY FROM 
			(
				SELECT A.MCODE, A.VCHRNO, A.TRNDATE, A.RATE, A.QTY, I.QTY INV_QTY, SUM(A.QTY) OVER (PARTITION BY A.MCODE ORDER BY TRNDATE, VCHRNO) CIW_QTY FROM #RESULT A JOIN #ITEMLIST I ON A.MCODE = I.MCODE
			) A
		UNION ALL
		SELECT C.MCODE, C.VAL_RATE, I.QTY FROM #CostMissingItems C JOIN #ITEMLIST I ON C.MCODE = I.MCODE
	) A WHERE USED_QTY >0
	GROUP BY A.MCODE	
END
ELSE IF @DETAIL = 50	-- CLOSING STOCK VALUE ONLY	
	SELECT SUM(A.[VALUE]) STKVALUE FROM #SummaryResult A
ELSE IF @DETAIL = 100  -- MCODE WISE STOCK VALUE IN COSTING TABLE FOR STOCK REPORT PURPOSE
BEGIN
	DELETE FROM COSTING
	INSERT INTO COSTING (MCODE,RATE) SELECT A.MCODE, A.RATE FROM #SummaryResult A
END
GOEND:
IF OBJECT_ID('TEMPDB..#RESULT1') IS NOT NULL DROP TABLE #RESULT1
IF OBJECT_ID('TEMPDB..#RESULT') IS NOT NULL DROP TABLE #RESULT
IF OBJECT_ID('TEMPDB..#STOCK') IS NOT NULL DROP TABLE #STOCK
IF OBJECT_ID('TEMPDB..#CostMissingItems') IS NOT NULL DROP TABLE #CostMissingItems
IF OBJECT_ID('TEMPDB..#DATA') IS NOT NULL DROP TABLE #DATA
SET NOCOUNT OFF