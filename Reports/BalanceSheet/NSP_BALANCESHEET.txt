CREATE OR ALTER PROCEDURE [dbo].[NSP_BALANCESHEET]
--DECLARE 
	@DATE DATETIME,
	@DIV VARCHAR(3) = '%',
	@OSTOCK NUMERIC(22,10),
	@CSTOCK NUMERIC(22,10),
	@SUMMARY TINYINT = 0,
	@LEV INTEGER = 2,
	@FYID VARCHAR(10) = '%',
	@IsUserInput BIT = 1
AS

set nocount on
--SET @DATE = '07-21-2021'; SET @DIV = '%'; SET @OSTOCK = 0; set @CSTOCK = 250000; SET @LEV = 5; SET @FYID = '77/78'

SET @LEV = @LEV+1
DECLARE @DEBTORS NUMERIC(24,12)
DECLARE @CREDITORS NUMERIC(24,12)
DECLARE @LVL INT

SELECT @DEBTORS = SUM(DRAMNT) - SUM(CRAMNT) FROM DBO.RMD_TRNTRAN_FN(@FYID) A INNER JOIN DBO.RMD_TRNMAIN_FN(0,@FYID) B ON A.VCHRNO = B.VCHRNO AND A.DIVISION = B.DIVISION INNER JOIN RMD_ACLIST C ON A.A_ACID = C.ACID
WHERE  A_ACID LIKE 'PA%' AND PTYPE = 'C'  AND B.TRNDATE < =  @date  AND ISNULL(B.DIVISION,'') LIKE  @DIV  --AND ISNULL(A.CostCenter,'') LIKE @CostCenter

--CREDITROS		
SELECT @CREDITORS = SUM(CRAMNT) - SUM(DRAMNT) FROM DBO.RMD_TRNTRAN_FN(@FYID) A INNER JOIN DBO.RMD_TRNMAIN_FN(0,@FYID) B ON A.VCHRNO = B.VCHRNO AND A.DIVISION = B.DIVISION INNER JOIN RMD_ACLIST C ON A.A_ACID = C.ACID
WHERE  A_ACID LIKE 'PA%' AND PTYPE = 'V'  AND B.TRNDATE < =  @date  AND ISNULL(B.DIVISION,'') LIKE  @DIV  --AND ISNULL(A.CostCenter,'') LIKE @CostCenter


DECLARE @GROSSPROFIT NUMERIC(24,12)
DECLARE @NETPROFIT NUMERIC(24,12)

IF OBJECT_ID('TEMPDB..#FINALRECORD') is not null drop table #FINALRECORD

SELECT A.A_ACID,SUM(A.BL)BL,A.ACTYPE,A.SUBGROUP,A.MAINGROUP, A.IsUserInput  INTO #FINALRECORD FROM
(
SELECT A_ACID,SUM(DRAMNT)-SUM(CRAMNT)BL,C.ACTYPE,C.PARENT SUBGROUP,C.MAINGROUP, '' IsUserInput FROM DBO.RMD_TRNTRAN_FN(@FYID) A INNER JOIN DBO.RMD_TRNMAIN_FN(0,@FYID) B ON A.VCHRNO = B.VCHRNO AND A.DIVISION = B.DIVISION AND ISNULL(A.PHISCALID,'') = ISNULL(B.PHISCALID,'')
 
INNER JOIN RMD_ACLIST C ON A.A_ACID = C.ACID WHERE B.TRNDATE <= @DATE AND ISNULL(A.DIVISION,'') LIKE @DIV 
AND A.A_ACID NOT IN ('DE01001','DI01003','AT01001','LB01001','AT01004','LB01005') AND A.A_ACID NOT LIKE 'PA%' --AND ISNULL(C.ACTYPE,'') IN ('II','IE','DI','DE','AT','LB') 
GROUP BY A_ACID,C.ACTYPE,C.PARENT,C.MAINGROUP
UNION ALL
--OPENING STOCK
---------------
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP, IIF(@IsUserInput = 1, ' (M)','') IsUserInput FROM (SELECT 'DE01001' ACID,@OSTOCK BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID
UNION ALL
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP, '' IsUserInput FROM (SELECT 'LB01002' ACID,@OSTOCK*-1 BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID
UNION ALL
--CLOSIN STOCK
---------------
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP, IIF(@IsUserInput = 1, ' (M)','') IsUserInput FROM (SELECT 'AT01004' ACID,@CSTOCK BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID
UNION ALL
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP, IIF(@IsUserInput = 1, ' (M)','') IsUserInput FROM (SELECT 'DI01003' ACID,@CSTOCK*-1 BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID       --CLOSING STOCKD (CR)    
UNION ALL
--SUNDRY DEBTORS
-----------------
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP, '' IsUserInput FROM (SELECT 'AT01001' ACID,@DEBTORS BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID
UNION ALL
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP, '' IsUserInput FROM (SELECT 'LB01001' ACID,@CREDITORS*-1 BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID
) A GROUP BY A_ACID,ACTYPE,SUBGROUP,MAINGROUP, A.IsUserInput

--NETPROFIT
-----------
SELECT @NETPROFIT = SUM(BL) FROM #FINALRECORD WHERE ACTYPE IN ('DI','DE','II','IE')
INSERT INTO #FINALRECORD
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP, '' IsUserInput FROM (SELECT 'LB01005' ACID,@NETPROFIT BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID

--CHART OF ACCOUNT LISTING
---------------------------
IF OBJECT_ID('TEMPDB..#TREE') is not null drop table #TREE
SELECT * INTO #TREE FROM (SELECT A.*,B.ACTYPE FROM  DBO.TreeExpandFunction_Account('BS','BALANCESHEET',0,0,0,0) A INNER JOIN RMD_ACLIST B ON A.ACID = B.ACID) A

--SELECT * FROM #TREE

--LIABILITIES
-------------
IF OBJECT_ID('TEMPDB..#TREE1') is not null drop table #TREE1
SELECT A.ACNAME + COALESCE(B.IsUserInput,'') ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE1 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'LB') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'LB') B ON A.ACID = B.A_ACID
--SELECT * FROM #TREE1
--TOTALING	
----------
select @LVL=ISNULL(MAX(LEVEL),0) from #TREE1 
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE1 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE1 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END


--ASSETS
---------
IF OBJECT_ID('TEMPDB..#TREE2') is not null drop table #TREE2
SELECT A.ACNAME + COALESCE(B.IsUserInput,'') ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE2 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'AT') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'AT') B ON A.ACID = B.A_ACID
--SELECT * FROM #TREE2
--TOTALING	
----------
select @LVL=ISNULL(MAX(LEVEL),0) from #TREE2 
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE2 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE2 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END

--RESULT
--------
DECLARE @LVL1 INT,@LVL2 INT
DECLARE @MLVL1 INT,@MLVL2 INT
select @LVL1=ISNULL(MAX(LEVEL),0) from #TREE1 
select @LVL2=ISNULL(MAX(LEVEL),0) from #TREE2 
select @MLVL1=ISNULL(MIN(LEVEL),0) from #TREE1 
select @MLVL2=ISNULL(MIN(LEVEL),0) from #TREE2 

SELECT * FROM 
(
	--LIABILITIES
	---------------
	SELECT 'LIABILITIES : ' ACNAME,NULL BL,NULL SUBTOTAL,NULL MAINTOTAL,NULL ACID,0 ID,2000 [LEVEL],'G' [TYPE],NULL ACTYPE,NULL MCAT,0 FLG
	UNION ALL
	SELECT A.ACNAME ACNAME,
	CONVERT(VARCHAR,CAST((CASE WHEN [TYPE] = 'A' THEN BL ELSE NULL END)*-1 AS MONEY),1) BL,
	CONVERT(VARCHAR,CAST((CASE WHEN [TYPE] = 'G' AND LEVEL > @MLVL1 THEN BL ELSE NULL END)*-1 AS MONEY),1) SUBTOTAL,
	CONVERT(VARCHAR,CAST((CASE WHEN LEVEL = @MLVL1 THEN BL ELSE NULL END)*-1 AS MONEY),1) MAINBL,
	A.ACID,A.ID,A.LEVEL,A.[TYPE],A.ACTYPE,A.MCAT,0 FLG FROM #TREE1 A WHERE ISNULL(BL,0) <> 0
	UNION ALL
	SELECT NULL,NULL,NULL,NULL,NULL,99998,0,'X',NULL,NULL,0 FLG
	UNION ALL
	SELECT 'TOTAL LIABILITIES  : ',NULL,NULL,CONVERT(varchar, CAST((SUM(BL))*-1 AS MONEY),1),NULL,99999,100,'G',NULL,NULL MCAT,0 FLG FROM #FINALRECORD WHERE ACTYPE = 'LB'
	
	UNION ALL
	
	SELECT NULL,NULL,NULL,NULL,NULL,0,0,'X',NULL,NULL,0.5 FLG
	UNION ALL
	
	--ASSETS
	--------
	SELECT 'ASSETS : ' ACNAME,NULL BL,NULL SUBTOTAL,NULL MAINTOTAL,NULL ACID,0 ID,2000 [LEVEL],'G' [TYPE],NULL ACTYPE,NULL MCAT,1 FLG
	UNION ALL
	SELECT A.ACNAME,
	CONVERT(VARCHAR,CAST((CASE WHEN [TYPE] = 'A' THEN BL ELSE NULL END) AS MONEY),1) BL,
	CONVERT(VARCHAR,CAST((CASE WHEN [TYPE] = 'G' AND LEVEL > @MLVL2 THEN BL ELSE NULL END) AS MONEY),1) SUBTOTAL,
	CONVERT(VARCHAR,CAST((CASE WHEN LEVEL = @MLVL2 THEN BL ELSE NULL END) AS MONEY),1) MAINBL,
	A.ACID,A.ID,A.LEVEL,A.[TYPE],A.ACTYPE,A.MCAT,1 FLG FROM #TREE2 A WHERE ISNULL(BL,0) <> 0
	UNION ALL
	SELECT NULL,NULL,NULL,NULL,NULL,99998,0,'X',NULL,NULL,1 FLG
	UNION ALL
	SELECT 'TOTAL ASSESTS :',NULL,NULL,CONVERT(varchar, CAST(SUM(BL) AS MONEY),1),NULL,99999,0,'G',NULL,NULL,1 FLG FROM #FINALRECORD WHERE ACTYPE = 'AT'
	UNION ALL
	SELECT NULL,NULL,NULL,NULL,NULL,(select MAX(id) from #TREE2),0,'X',NULL,NULL,1 FLG
) A WHERE (((@SUMMARY = 1 AND [LEVEL] <=@LEV) OR (@SUMMARY = 0 AND [LEVEL] <=10000)) OR [LEVEL] >= 100) 
order by FLG,ID

IF OBJECT_ID('TEMPDB..#FINALRECORD') is not null drop table #FINALRECORD
IF OBJECT_ID('TEMPDB..#TREE') is not null drop table #TREE
IF OBJECT_ID('TEMPDB..#TREE1') is not null drop table #TREE1
IF OBJECT_ID('TEMPDB..#TREE2') is not null drop table #TREE2
set nocount off