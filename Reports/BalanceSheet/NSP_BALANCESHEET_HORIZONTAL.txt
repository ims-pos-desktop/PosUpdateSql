CREATE OR ALTER   PROCEDURE [dbo].[NSP_BALANCESHEET_HORIZONTAL]
--DECLARE 
	@DATE DATETIME,
	@DIV VARCHAR(3) = '%',
	@OSTOCK NUMERIC(22,10),
	@CSTOCK NUMERIC(22,10),
	@SUMMARY TINYINT = 0,
	@LEV TINYINT = 2,
	@FYID VARCHAR(10) = '%'
AS

set nocount on
--SET @DATE = '07-16-2016'; SET @DIV = '%'; SET @OSTOCK = 100000; set @CSTOCK = 250000

DECLARE @DEBTORS NUMERIC(24,12)
DECLARE @CREDITORS NUMERIC(24,12)
DECLARE @LVL INT
SET @LEV = @LEV+1

SELECT @DEBTORS = SUM(DRAMNT) - SUM(CRAMNT) FROM DBO.RMD_TRNTRAN_FN(@FYID) A INNER JOIN DBO.RMD_TRNMAIN_FN(0, @FYID) B ON A.VCHRNO = B.VCHRNO AND A.DIVISION = B.DIVISION INNER JOIN RMD_ACLIST C ON A.A_ACID = C.ACID
WHERE  A_ACID LIKE 'PA%' AND PTYPE = 'C'  AND B.TRNDATE < =  @date  AND ISNULL(B.DIVISION,'') LIKE  @DIV  --AND ISNULL(A.CostCenter,'') LIKE @CostCenter

--CREDITROS		
SELECT @CREDITORS = SUM(CRAMNT) - SUM(DRAMNT) FROM DBO.RMD_TRNTRAN_FN(@FYID) A INNER JOIN DBO.RMD_TRNMAIN_FN(0, @FYID) B ON A.VCHRNO = B.VCHRNO AND A.DIVISION = B.DIVISION INNER JOIN RMD_ACLIST C ON A.A_ACID = C.ACID
WHERE  A_ACID LIKE 'PA%' AND PTYPE = 'V'  AND B.TRNDATE < =  @date  AND ISNULL(B.DIVISION,'') LIKE  @DIV  --AND ISNULL(A.CostCenter,'') LIKE @CostCenter


IF OBJECT_ID('TEMPDB..#FINALRECORD') is not null drop table #FINALRECORD

SELECT A.A_ACID,SUM(A.BL)BL,A.ACTYPE,A.SUBGROUP,A.MAINGROUP  INTO #FINALRECORD FROM
(
SELECT A_ACID,SUM(DRAMNT)-SUM(CRAMNT)BL,C.ACTYPE,C.PARENT SUBGROUP,C.MAINGROUP FROM DBO.RMD_TRNTRAN_FN(@FYID) A INNER JOIN DBO.RMD_TRNMAIN_FN(0, @FYID) B ON A.VCHRNO = B.VCHRNO AND A.DIVISION = B.DIVISION AND ISNULL(A.PHISCALID,'') = ISNULL(B.PHISCALID,'') 
INNER JOIN RMD_ACLIST C ON A.A_ACID = C.ACID WHERE B.TRNDATE <= @DATE AND ISNULL(A.DIVISION,'') LIKE @DIV 
AND A.A_ACID NOT IN ('DE01001','DI01003','AT01001','LB01001','AT01004','LB01005') --AND ISNULL(C.ACTYPE,'') IN ('II','IE','DI','DE','AT','LB') 
GROUP BY A_ACID,C.ACTYPE,C.PARENT,C.MAINGROUP
UNION ALL
--OPENING STOCK
---------------
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP FROM (SELECT 'DE01001' ACID,@OSTOCK BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID
UNION ALL
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP FROM (SELECT 'LB01002' ACID,@OSTOCK*-1 BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID
UNION ALL
--CLOSIN STOCK
---------------
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP FROM (SELECT 'AT01004' ACID,@CSTOCK BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID
UNION ALL
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP FROM (SELECT 'DI01003' ACID,@CSTOCK*-1 BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID       --CLOSING STOCKD (CR)    
UNION ALL
--SUNDRY DEBTORS
-----------------
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP FROM (SELECT 'AT01001' ACID,@DEBTORS BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID
UNION ALL
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP FROM (SELECT 'LB01001' ACID,@CREDITORS*-1 BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID
) A GROUP BY A_ACID,ACTYPE,SUBGROUP,MAINGROUP

--NETPROFIT
-----------
DECLARE @NETPROFIT NUMERIC(24,12)
SELECT @NETPROFIT = SUM(BL) FROM #FINALRECORD WHERE ACTYPE IN ('DI','DE','II','IE')
INSERT INTO #FINALRECORD
SELECT A.ACID,A.BL,B.ACTYPE,B.PARENT,B.MAINGROUP FROM (SELECT 'LB01005' ACID,@NETPROFIT BL) A LEFT JOIN RMD_aCLIST B ON A.ACID = B.ACID

--TOTALLING ASSETS & LIABILITIES
--------------------------------
DECLARE @TOTAL1 NUMERIC(22,10)
DECLARE @TOTAL2 NUMERIC (22,10)
SELECT @TOTAL1 = SUM(BL) FROM #FINALRECORD WHERE ACTYPE = 'LB'
SELECT @TOTAL2 = SUM(BL) FROM #FINALRECORD WHERE ACTYPE = 'AT'

--CHART OF ACCOUNT LISTING
---------------------------
IF OBJECT_ID('TEMPDB..#TREE') is not null drop table #TREE
SELECT * INTO #TREE FROM (SELECT A.*,B.ACTYPE FROM  DBO.TreeExpandFunction_Account('BS','BALANCESHEET',0,0,0,0) A INNER JOIN RMD_ACLIST B ON A.ACID = B.ACID) A

--LIABILITES
-------------
IF OBJECT_ID('TEMPDB..#TREE1') is not null drop table #TREE1
SELECT A.ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE1 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'LB') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'LB') B ON A.ACID = B.A_ACID ORDER BY LEVEL
--SELECT * FROM #TREE1

--TOTALING	
----------
select @LVL=ISNULL(MAX(LEVEL),0) from #TREE1 
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE1 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE1 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END

--ASSETS
---------
IF OBJECT_ID('TEMPDB..#TREE2') is not null drop table #TREE2
SELECT A.ACNAME,B.BL,A.ACID,A.[TYPE],A.LEVEL,A.ACCODE,A.PARENT,A.ACTYPE,A.ID,A.MCAT INTO #TREE2 FROM (SELECT * FROM #TREE WHERE ACTYPE = 'AT') A LEFT JOIN (SELECT * FROM #FINALRECORD WHERE ACTYPE = 'AT') B ON A.ACID = B.A_ACID ORDER BY LEVEL
--SELECT * FROM #TREE2

--TOTALING	
----------
select @LVL=ISNULL(MAX(LEVEL),0) from #TREE2 
WHILE @lvl > 0
	BEGIN
	UPDATE A SET A.BL = B.BL FROM #TREE2 A INNER JOIN
	(
		SELECT PARENT,SUM(ISNULL(BL,0)) BL FROM #TREE2 WHERE LEVEL = @LVL GROUP BY PARENT
	) B ON A.ACID = B.PARENT
	SET @lvl = @lvl - 1;
END


--RESULT
--------
DECLARE @LVL1 INT,@LVL2 INT
DECLARE @MLVL1 INT,@MLVL2 INT
select @LVL1=ISNULL(MAX(LEVEL),0) from #TREE1 
select @LVL2=ISNULL(MAX(LEVEL),0) from #TREE2 
select @MLVL1=ISNULL(MIN(LEVEL),0) from #TREE1 
select @MLVL2=ISNULL(MIN(LEVEL),0) from #TREE2 

--LIABILITIES
---------------
IF OBJECT_ID('TEMPDB..#LIABILITIES') is not null drop table #LIABILITIES

SELECT ROW_NUMBER() OVER(ORDER BY ID) AS ROWNUM,A.ACNAME,A.BL,A.SUBTOTAL,A.MAINTOTAL,A.ACID,A.ID,A.[TYPE] INTO #LIABILITIES FROM
(
	SELECT A.ACNAME ACNAME,
	CONVERT(VARCHAR,CAST((CASE WHEN LEVEL = @LVL1 THEN BL ELSE NULL END)*-1 AS MONEY),1) BL,
	CONVERT(VARCHAR,CAST((CASE WHEN LEVEL > @MLVL1 AND LEVEL <@LVL1 THEN BL ELSE NULL END)*-1 AS MONEY),1) SUBTOTAL,
	CONVERT(VARCHAR,CAST((CASE WHEN LEVEL = @MLVL1 THEN BL ELSE NULL END)*-1 AS MONEY),1) MAINTOTAL,
	A.ACID,A.ID,A.LEVEL,A.[TYPE],A.ACTYPE,A.MCAT FROM #TREE1 A WHERE ISNULL(BL,0) <> 0
) A WHERE  (((@SUMMARY = 1 AND [LEVEL] <=@LEV) OR (@SUMMARY = 0 AND [LEVEL] <=10000)) OR [LEVEL] >= 1000) 

--ASSETS
--------
IF OBJECT_ID('TEMPDB..#BALANCESHEET') is not null drop table #BALANCESHEET

SELECT ROW_NUMBER() OVER(ORDER BY ID) AS ROWNUM,A.ACNAME,A.BL,A.SUBTOTAL,A.MAINTOTAL,A.ACID,A.ID,A.[TYPE] INTO #ASSETS FROM
(
	SELECT A.ACNAME,
	CONVERT(VARCHAR,CAST((CASE WHEN LEVEL = @LVL1 THEN BL ELSE NULL END) AS MONEY),1) BL,
	CONVERT(VARCHAR,CAST((CASE WHEN LEVEL > @MLVL1 AND LEVEL <@LVL1 THEN BL ELSE NULL END) AS MONEY),1) SUBTOTAL,
	CONVERT(VARCHAR,CAST((CASE WHEN LEVEL = @MLVL1 THEN BL ELSE NULL END) AS MONEY),1) MAINTOTAL,
	A.ACID,A.ID,A.LEVEL,A.[TYPE],A.ACTYPE,A.MCAT FROM #TREE2 A WHERE ISNULL(BL,0) <> 0	
) A WHERE   (((@SUMMARY = 1 AND [LEVEL] <=@LEV) OR (@SUMMARY = 0 AND [LEVEL] <=10000)) OR [LEVEL] >= 1000) 


SELECT * INTO #BALANCESHEET FROM 
(
SELECT B.ACNAME LIB_ACNAME,B.BL LIB_AMOUNT,B.SUBTOTAL LIB_SUBTOTAL,B.MAINTOTAL LIB_MAINTOTAL,' ' + A.ACNAME AST_INCOME,A.BL AST_AMOUNT,A.SUBTOTAL AST_SUBTOTAL,A.MAINTOTAL AST_MAINTOTAL,B.ACID ACID_LIB,B.ID ID_LIB,B.[TYPE] TYPE_LIB,A.ACID ACID_AST,A.ID ID_AST,A.[TYPE] TYPE_AST
FROM #ASSETS A FULL OUTER JOIN #LIABILITIES B ON A.ROWNUM = B.ROWNUM
) A

--TOTALLING ASSETS & LIABILITIES
--------------------------------
INSERT INTO #BALANCESHEET
SELECT '         TOTAL :',NULL,NULL,CONVERT(varchar, CAST(ABS(@TOTAL1)AS MONEY),1),'          TOTAL :',NULL,NULL,CONVERT(varchar, CAST(ABS(@TOTAL2)AS MONEY),1),1000,1000,'G',1000,1000,'G'
--union all
--SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,2000,2000,'A',2000,2000,'A'

SELECT * FROM #BALANCESHEET ORDER BY ID_LIB


IF OBJECT_ID('TEMPDB..#FINALRECORD') is not null drop table #FINALRECORD
IF OBJECT_ID('TEMPDB..#TREE') is not null drop table #TREE
IF OBJECT_ID('TEMPDB..#TREE1') is not null drop table #TREE1
IF OBJECT_ID('TEMPDB..#TREE2') is not null drop table #TREE2
IF OBJECT_ID('TEMPDB..#ASSETS') is not null drop table #ASSETS
IF OBJECT_ID('TEMPDB..#LIABILITIES') is not null drop table #LIABILITIES
IF OBJECT_ID('TEMPDB..#BALANCESHEET') is not null drop table #BALANCESHEET

set nocount off
	





